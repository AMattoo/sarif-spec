<?xml version="1.0" encoding="UTF-8"?>

<BugCollection version="3.0.1" sequence="0" timestamp="1513616763000" analysisTimestamp="1513617024036" release="">
  <Project projectName="twitter4j-3.0.3">
    <Jar>/home/kupsch/build/pkg1/twitter4j-3.0.3/twitter4j-stream/target/test-classes/twitter4j/TwitterTestBase.class</Jar>
    <Jar>/home/kupsch/build/pkg1/twitter4j-3.0.3/twitter4j-stream/target/test-classes/twitter4j/json/JSONObjectTypeTest.class</Jar>
    <Jar>/home/kupsch/build/pkg1/twitter4j-3.0.3/twitter4j-stream/target/test-classes/twitter4j/StreamAPITest$2.class</Jar>
    <Jar>/home/kupsch/build/pkg1/twitter4j-3.0.3/twitter4j-stream/target/test-classes/twitter4j/SiteStreamsTest.class</Jar>
    <Jar>/home/kupsch/build/pkg1/twitter4j-3.0.3/twitter4j-stream/target/test-classes/twitter4j/StreamAPITest$1.class</Jar>
    <Jar>/home/kupsch/build/pkg1/twitter4j-3.0.3/twitter4j-stream/target/test-classes/twitter4j/StreamAPITest.class</Jar>
    <Jar>/home/kupsch/build/pkg1/twitter4j-3.0.3/twitter4j-stream/target/test-classes/twitter4j/TwitterTestBase$TestUserInfo.class</Jar>
    <Jar>/home/kupsch/build/pkg1/twitter4j-3.0.3/twitter4j-stream/target/test-classes/twitter4j/SpringCompatibilityTest.class</Jar>
    <Jar>/home/kupsch/build/pkg1/twitter4j-3.0.3/twitter4j-stream/target/test-classes/twitter4j/json/DataObjectFactoryTest.class</Jar>
    <Jar>/home/kupsch/build/pkg1/twitter4j-3.0.3/twitter4j-stream/target/test-classes/twitter4j/internal/json/DAOTest.class</Jar>
    <Jar>/home/kupsch/build/pkg1/twitter4j-3.0.3/twitter4j-stream/target/test-classes/twitter4j/UserStreamTest.class</Jar>
    <AuxClasspathEntry>/home/kupsch/build/pkg1/twitter4j-3.0.3/twitter4j-stream/target/test-classes</AuxClasspathEntry>
    <AuxClasspathEntry>/home/kupsch/build/pkg1/twitter4j-3.0.3/twitter4j-stream/target/classes</AuxClasspathEntry>
    <AuxClasspathEntry>/home/kupsch/build/pkg1/twitter4j-3.0.3/twitter4j-core/target/twitter4j-core-3.0.3.jar</AuxClasspathEntry>
    <AuxClasspathEntry>/home/kupsch/build/pkg1/twitter4j-3.0.3/twitter4j-async/target/twitter4j-async-3.0.3.jar</AuxClasspathEntry>
    <AuxClasspathEntry>/home/kupsch/.m2/repository/junit/junit/3.8.2/junit-3.8.2.jar</AuxClasspathEntry>
    <AuxClasspathEntry>/home/kupsch/.m2/repository/org/springframework/spring/2.5.6/spring-2.5.6.jar</AuxClasspathEntry>
    <AuxClasspathEntry>/home/kupsch/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar</AuxClasspathEntry>
    <SrcDir>/home/kupsch/build/pkg1/twitter4j-3.0.3/twitter4j-stream/src/test/java</SrcDir>
    <Plugin id="com.h3xstream.findsecbugs" enabled="true"/>
    <Plugin id="com.mebigfatguy.fbcontrib" enabled="true"/>
  </Project>
  <BugInstance type="CLI_CONSTANT_LIST_INDEX" priority="2" rank="7" abbrev="CLI" category="CORRECTNESS" instanceHash="a21b4995b2deecb13285dbd4cb25b041" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method accesses list or array with constant index</ShortMessage>
    <LongMessage>Method twitter4j.SiteStreamsTest.assertReceived(String, Object) accesses list or array with constant index</LongMessage>
    <Class classname="twitter4j.SiteStreamsTest" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="40" end="410" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java">
        <Message>At SiteStreamsTest.java:[lines 40-410]</Message>
      </SourceLine>
      <Message>In class twitter4j.SiteStreamsTest</Message>
    </Class>
    <Method classname="twitter4j.SiteStreamsTest" name="assertReceived" signature="(Ljava/lang/String;Ljava/lang/Object;)V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="244" end="252" startBytecode="0" endBytecode="179" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java"/>
      <Message>In method twitter4j.SiteStreamsTest.assertReceived(String, Object)</Message>
    </Method>
    <SourceLine classname="twitter4j.SiteStreamsTest" primary="true" start="246" end="246" startBytecode="39" endBytecode="39" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java">
      <Message>At SiteStreamsTest.java:[line 246]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="CLI_CONSTANT_LIST_INDEX" priority="2" rank="7" abbrev="CLI" category="CORRECTNESS" instanceHash="c79614f3e87e6c04c23eefb00e64af24" instanceOccurrenceNum="0" instanceOccurrenceMax="2">
    <ShortMessage>Method accesses list or array with constant index</ShortMessage>
    <LongMessage>Method twitter4j.SiteStreamsTest.testStream() accesses list or array with constant index</LongMessage>
    <Class classname="twitter4j.SiteStreamsTest" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="40" end="410" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java">
        <Message>At SiteStreamsTest.java:[lines 40-410]</Message>
      </SourceLine>
      <Message>In class twitter4j.SiteStreamsTest</Message>
    </Class>
    <Method classname="twitter4j.SiteStreamsTest" name="testStream" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="62" end="88" startBytecode="0" endBytecode="553" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java"/>
      <Message>In method twitter4j.SiteStreamsTest.testStream()</Message>
    </Method>
    <SourceLine classname="twitter4j.SiteStreamsTest" primary="true" start="73" end="73" startBytecode="143" endBytecode="143" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java">
      <Message>At SiteStreamsTest.java:[line 73]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="CLI_CONSTANT_LIST_INDEX" priority="2" rank="7" abbrev="CLI" category="CORRECTNESS" instanceHash="c79614f3e87e6c04c23eefb00e64af24" instanceOccurrenceNum="1" instanceOccurrenceMax="2">
    <ShortMessage>Method accesses list or array with constant index</ShortMessage>
    <LongMessage>Method twitter4j.SiteStreamsTest.testStream() accesses list or array with constant index</LongMessage>
    <Class classname="twitter4j.SiteStreamsTest" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="40" end="410" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java">
        <Message>At SiteStreamsTest.java:[lines 40-410]</Message>
      </SourceLine>
      <Message>In class twitter4j.SiteStreamsTest</Message>
    </Class>
    <Method classname="twitter4j.SiteStreamsTest" name="testStream" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="62" end="88" startBytecode="0" endBytecode="553" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java"/>
      <Message>In method twitter4j.SiteStreamsTest.testStream()</Message>
    </Method>
    <SourceLine classname="twitter4j.SiteStreamsTest" primary="true" start="80" end="80" startBytecode="229" endBytecode="229" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java">
      <Message>At SiteStreamsTest.java:[line 80]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="CLI_CONSTANT_LIST_INDEX" priority="2" rank="7" abbrev="CLI" category="CORRECTNESS" instanceHash="c79614f3e87e6c04c23eefb00e64af24" instanceOccurrenceNum="2" instanceOccurrenceMax="2">
    <ShortMessage>Method accesses list or array with constant index</ShortMessage>
    <LongMessage>Method twitter4j.SiteStreamsTest.testStream() accesses list or array with constant index</LongMessage>
    <Class classname="twitter4j.SiteStreamsTest" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="40" end="410" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java">
        <Message>At SiteStreamsTest.java:[lines 40-410]</Message>
      </SourceLine>
      <Message>In class twitter4j.SiteStreamsTest</Message>
    </Class>
    <Method classname="twitter4j.SiteStreamsTest" name="testStream" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="62" end="88" startBytecode="0" endBytecode="553" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java"/>
      <Message>In method twitter4j.SiteStreamsTest.testStream()</Message>
    </Method>
    <SourceLine classname="twitter4j.SiteStreamsTest" primary="true" start="87" end="87" startBytecode="315" endBytecode="315" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java">
      <Message>At SiteStreamsTest.java:[line 87]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="DLS_DEAD_LOCAL_STORE" priority="2" rank="17" abbrev="DLS" category="STYLE" instanceHash="4290e7903aeae709b450aeb776cdfd76" instanceOccurrenceNum="0" instanceOccurrenceMax="0" cweid="563">
    <ShortMessage>Dead store to local variable</ShortMessage>
    <LongMessage>Dead store to dm in twitter4j.SiteStreamsTest.testSiteStream()</LongMessage>
    <Class classname="twitter4j.SiteStreamsTest" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="40" end="410" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java">
        <Message>At SiteStreamsTest.java:[lines 40-410]</Message>
      </SourceLine>
      <Message>In class twitter4j.SiteStreamsTest</Message>
    </Class>
    <Method classname="twitter4j.SiteStreamsTest" name="testSiteStream" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="91" end="241" startBytecode="0" endBytecode="430" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java"/>
      <Message>In method twitter4j.SiteStreamsTest.testSiteStream()</Message>
    </Method>
    <LocalVariable name="dm" register="13" pc="544" role="LOCAL_VARIABLE_NAMED">
      <Message>Local variable named dm</Message>
    </LocalVariable>
    <SourceLine classname="twitter4j.SiteStreamsTest" primary="true" start="170" end="170" startBytecode="542" endBytecode="542" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java">
      <Message>At SiteStreamsTest.java:[line 170]</Message>
    </SourceLine>
    <Property name="edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.LOCAL_NAME" value="dm"/>
    <Property name="edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.METHOD_RESULT" value="true"/>
    <Property name="edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.NO_LOADS" value="true"/>
  </BugInstance>
  <BugInstance type="IMC_IMMATURE_CLASS_PRINTSTACKTRACE" priority="2" rank="17" abbrev="IMC" category="STYLE" instanceHash="25bcfcf94c00a8a38f08c10c6ab755a7" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method prints the stack trace to the console</ShortMessage>
    <LongMessage>Method twitter4j.SiteStreamsTest.onException(Exception) prints the stack trace to the console</LongMessage>
    <Class classname="twitter4j.SiteStreamsTest" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="40" end="410" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java">
        <Message>At SiteStreamsTest.java:[lines 40-410]</Message>
      </SourceLine>
      <Message>In class twitter4j.SiteStreamsTest</Message>
    </Class>
    <Method classname="twitter4j.SiteStreamsTest" name="onException" signature="(Ljava/lang/Exception;)V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="407" end="410" startBytecode="0" endBytecode="90" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java"/>
      <Message>In method twitter4j.SiteStreamsTest.onException(Exception)</Message>
    </Method>
    <SourceLine classname="twitter4j.SiteStreamsTest" primary="true" start="408" end="408" startBytecode="19" endBytecode="19" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java">
      <Message>At SiteStreamsTest.java:[line 408]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="IMC_IMMATURE_CLASS_PRINTSTACKTRACE" priority="2" rank="17" abbrev="IMC" category="STYLE" instanceHash="31e0c2820ea419d769e68d6f63d98e47" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method prints the stack trace to the console</ShortMessage>
    <LongMessage>Method twitter4j.SiteStreamsTest.waitForStatus(String) prints the stack trace to the console</LongMessage>
    <Class classname="twitter4j.SiteStreamsTest" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="40" end="410" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java">
        <Message>At SiteStreamsTest.java:[lines 40-410]</Message>
      </SourceLine>
      <Message>In class twitter4j.SiteStreamsTest</Message>
    </Class>
    <Method classname="twitter4j.SiteStreamsTest" name="waitForStatus" signature="(Ljava/lang/String;)V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="255" end="262" startBytecode="0" endBytecode="195" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java"/>
      <Message>In method twitter4j.SiteStreamsTest.waitForStatus(String)</Message>
    </Method>
    <SourceLine classname="twitter4j.SiteStreamsTest" primary="true" start="260" end="260" startBytecode="98" endBytecode="98" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java">
      <Message>At SiteStreamsTest.java:[line 260]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="NN_NAKED_NOTIFY" priority="2" rank="14" abbrev="NN" category="MT_CORRECTNESS" instanceHash="c4bee4f9fec98d076b551ba82c769f36" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Naked notify</ShortMessage>
    <LongMessage>Naked notify in twitter4j.SiteStreamsTest.notifyResponse()</LongMessage>
    <Class classname="twitter4j.SiteStreamsTest" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="40" end="410" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java">
        <Message>At SiteStreamsTest.java:[lines 40-410]</Message>
      </SourceLine>
      <Message>In class twitter4j.SiteStreamsTest</Message>
    </Class>
    <Method classname="twitter4j.SiteStreamsTest" name="notifyResponse" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="267" end="268" startBytecode="0" endBytecode="50" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java"/>
      <Message>In method twitter4j.SiteStreamsTest.notifyResponse()</Message>
    </Method>
    <SourceLine classname="twitter4j.SiteStreamsTest" primary="true" start="267" end="267" startBytecode="1" endBytecode="1" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java">
      <Message>At SiteStreamsTest.java:[line 267]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE" priority="2" rank="20" abbrev="OBL" category="EXPERIMENTAL" instanceHash="a5889870f24cbe5b4f71133ea885e671" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method may fail to clean up stream or resource on checked exception</ShortMessage>
    <LongMessage>twitter4j.SiteStreamsTest.testSiteStream() may fail to clean up java.io.InputStream on checked exception</LongMessage>
    <Class classname="twitter4j.SiteStreamsTest" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="40" end="410" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java">
        <Message>At SiteStreamsTest.java:[lines 40-410]</Message>
      </SourceLine>
      <Message>In class twitter4j.SiteStreamsTest</Message>
    </Class>
    <Method classname="twitter4j.SiteStreamsTest" name="testSiteStream" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="91" end="241" startBytecode="0" endBytecode="1635" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java"/>
      <Message>In method twitter4j.SiteStreamsTest.testSiteStream()</Message>
    </Method>
    <Class classname="java.io.InputStream" role="CLASS_REFTYPE">
      <SourceLine classname="java.io.InputStream" start="45" end="363" sourcefile="InputStream.java" sourcepath="java/io/InputStream.java">
        <Message>At InputStream.java:[lines 45-363]</Message>
      </SourceLine>
      <Message>Reference type java.io.InputStream</Message>
    </Class>
    <Int value="1" role="INT_OBLIGATIONS_REMAINING">
      <Message>1 instances of obligation remaining</Message>
    </Int>
    <SourceLine classname="twitter4j.SiteStreamsTest" primary="true" start="91" end="91" startBytecode="5" endBytecode="5" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java" role="SOURCE_LINE_OBLIGATION_CREATED">
      <Message>Obligation to clean up resource created at SiteStreamsTest.java:[line 91] is not discharged</Message>
    </SourceLine>
    <SourceLine classname="twitter4j.SiteStreamsTest" start="92" end="92" startBytecode="9" endBytecode="9" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java" role="SOURCE_LINE_PATH_CONTINUES">
      <Message>Path continues at SiteStreamsTest.java:[line 92]</Message>
    </SourceLine>
    <SourceLine classname="twitter4j.SiteStreamsTest" start="95" end="95" startBytecode="25" endBytecode="25" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java" role="SOURCE_LINE_PATH_CONTINUES">
      <Message>Path continues at SiteStreamsTest.java:[line 95]</Message>
    </SourceLine>
    <SourceLine classname="twitter4j.SiteStreamsTest" start="96" end="96" startBytecode="33" endBytecode="33" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java" role="SOURCE_LINE_PATH_CONTINUES">
      <Message>Path continues at SiteStreamsTest.java:[line 96]</Message>
    </SourceLine>
    <String value="{InputStream x 1}" role="STRING_REMAINING_OBLIGATIONS">
      <Message>Remaining obligations: {InputStream x 1}</Message>
    </String>
  </BugInstance>
  <BugInstance type="PRMC_POSSIBLY_REDUNDANT_METHOD_CALLS" priority="2" rank="18" abbrev="PRMC" category="PERFORMANCE" instanceHash="80b1eaff97068499ce8a7775c7672cec" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method appears to call the same method on the same object redundantly</ShortMessage>
    <LongMessage>Method twitter4j.SiteStreamsTest.testSiteStream() appears to call the same method on the same object redundantly</LongMessage>
    <Class classname="twitter4j.SiteStreamsTest" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="40" end="410" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java">
        <Message>At SiteStreamsTest.java:[lines 40-410]</Message>
      </SourceLine>
      <Message>In class twitter4j.SiteStreamsTest</Message>
    </Class>
    <Method classname="twitter4j.SiteStreamsTest" name="testSiteStream" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="91" end="241" startBytecode="0" endBytecode="1635" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java"/>
      <Message>In method twitter4j.SiteStreamsTest.testSiteStream()</Message>
    </Method>
    <SourceLine classname="twitter4j.SiteStreamsTest" primary="true" start="135" end="135" startBytecode="261" endBytecode="261" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java">
      <Message>At SiteStreamsTest.java:[line 135]</Message>
    </SourceLine>
    <String value="getInfo()Ltwitter4j/ControlStreamInfo;">
      <Message>Value getInfo()Ltwitter4j/ControlStreamInfo;</Message>
    </String>
  </BugInstance>
  <BugInstance type="SSCU_SUSPICIOUS_SHADED_CLASS_USE" priority="2" rank="7" abbrev="SSCU" category="CORRECTNESS" instanceHash="1af8280c35ea21a2c6164a9dc47c5961" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method calls a method from a class that has been shaded by a 3rdparty jar</ShortMessage>
    <LongMessage>Method twitter4j.SiteStreamsTest.testStallWarnings() calls a method from a class that has been shaded by a 3rdparty jar</LongMessage>
    <Class classname="twitter4j.SiteStreamsTest" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="40" end="410" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java">
        <Message>At SiteStreamsTest.java:[lines 40-410]</Message>
      </SourceLine>
      <Message>In class twitter4j.SiteStreamsTest</Message>
    </Class>
    <Method classname="twitter4j.SiteStreamsTest" name="testStallWarnings" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.SiteStreamsTest" start="52" end="59" startBytecode="0" endBytecode="149" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java"/>
      <Message>In method twitter4j.SiteStreamsTest.testStallWarnings()</Message>
    </Method>
    <SourceLine classname="twitter4j.SiteStreamsTest" primary="true" start="53" end="53" startBytecode="22" endBytecode="22" sourcefile="SiteStreamsTest.java" sourcepath="twitter4j/SiteStreamsTest.java" relSourcepath="twitter4j/SiteStreamsTest.java">
      <Message>At SiteStreamsTest.java:[line 53]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="BC_VACUOUS_INSTANCEOF" priority="2" rank="17" abbrev="BC" category="STYLE" instanceHash="c40a327f24fb6f6f27c9b5a98b860dd4" instanceOccurrenceNum="0" instanceOccurrenceMax="0" cweid="571">
    <ShortMessage>instanceof will always return true</ShortMessage>
    <LongMessage>instanceof will always return true for all non-null values in twitter4j.SpringCompatibilityTest.testFactoryInstantiation(), since all twitter4j.AsyncTwitter are instances of twitter4j.AsyncTwitter</LongMessage>
    <Class classname="twitter4j.SpringCompatibilityTest" primary="true">
      <SourceLine classname="twitter4j.SpringCompatibilityTest" start="36" end="89" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java">
        <Message>At SpringCompatibilityTest.java:[lines 36-89]</Message>
      </SourceLine>
      <Message>In class twitter4j.SpringCompatibilityTest</Message>
    </Class>
    <Method classname="twitter4j.SpringCompatibilityTest" name="testFactoryInstantiation" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.SpringCompatibilityTest" start="54" end="65" startBytecode="0" endBytecode="36" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java"/>
      <Message>In method twitter4j.SpringCompatibilityTest.testFactoryInstantiation()</Message>
    </Method>
    <Type descriptor="Ltwitter4j/AsyncTwitter;" role="TYPE_FOUND">
      <SourceLine classname="twitter4j.AsyncTwitter" sourcefile="AsyncTwitter.java" sourcepath="twitter4j/AsyncTwitter.java">
        <Message>In AsyncTwitter.java</Message>
      </SourceLine>
      <Message>Actual type twitter4j.AsyncTwitter</Message>
    </Type>
    <Type descriptor="Ltwitter4j/AsyncTwitter;" role="TYPE_EXPECTED">
      <SourceLine classname="twitter4j.AsyncTwitter" sourcefile="AsyncTwitter.java" sourcepath="twitter4j/AsyncTwitter.java">
        <Message>In AsyncTwitter.java</Message>
      </SourceLine>
      <Message>Expected twitter4j.AsyncTwitter</Message>
    </Type>
    <SourceLine classname="twitter4j.SpringCompatibilityTest" primary="true" start="60" end="60" startBytecode="46" endBytecode="46" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java">
      <Message>At SpringCompatibilityTest.java:[line 60]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="BC_VACUOUS_INSTANCEOF" priority="2" rank="17" abbrev="BC" category="STYLE" instanceHash="1d9db7c47911bda8d9699c82fed5be96" instanceOccurrenceNum="0" instanceOccurrenceMax="0" cweid="571">
    <ShortMessage>instanceof will always return true</ShortMessage>
    <LongMessage>instanceof will always return true for all non-null values in twitter4j.SpringCompatibilityTest.testFactoryInstantiation(), since all twitter4j.Twitter are instances of twitter4j.Twitter</LongMessage>
    <Class classname="twitter4j.SpringCompatibilityTest" primary="true">
      <SourceLine classname="twitter4j.SpringCompatibilityTest" start="36" end="89" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java">
        <Message>At SpringCompatibilityTest.java:[lines 36-89]</Message>
      </SourceLine>
      <Message>In class twitter4j.SpringCompatibilityTest</Message>
    </Class>
    <Method classname="twitter4j.SpringCompatibilityTest" name="testFactoryInstantiation" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.SpringCompatibilityTest" start="54" end="65" startBytecode="0" endBytecode="36" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java"/>
      <Message>In method twitter4j.SpringCompatibilityTest.testFactoryInstantiation()</Message>
    </Method>
    <Type descriptor="Ltwitter4j/Twitter;" role="TYPE_FOUND">
      <SourceLine classname="twitter4j.Twitter" sourcefile="Twitter.java" sourcepath="twitter4j/Twitter.java">
        <Message>In Twitter.java</Message>
      </SourceLine>
      <Message>Actual type twitter4j.Twitter</Message>
    </Type>
    <Type descriptor="Ltwitter4j/Twitter;" role="TYPE_EXPECTED">
      <SourceLine classname="twitter4j.Twitter" sourcefile="Twitter.java" sourcepath="twitter4j/Twitter.java">
        <Message>In Twitter.java</Message>
      </SourceLine>
      <Message>Expected twitter4j.Twitter</Message>
    </Type>
    <SourceLine classname="twitter4j.SpringCompatibilityTest" primary="true" start="56" end="56" startBytecode="19" endBytecode="19" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java">
      <Message>At SpringCompatibilityTest.java:[line 56]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="BC_VACUOUS_INSTANCEOF" priority="2" rank="17" abbrev="BC" category="STYLE" instanceHash="5291fccb60035d0c67ac71027ca5b6cb" instanceOccurrenceNum="0" instanceOccurrenceMax="0" cweid="571">
    <ShortMessage>instanceof will always return true</ShortMessage>
    <LongMessage>instanceof will always return true for all non-null values in twitter4j.SpringCompatibilityTest.testFactoryInstantiation(), since all twitter4j.TwitterStream are instances of twitter4j.TwitterStream</LongMessage>
    <Class classname="twitter4j.SpringCompatibilityTest" primary="true">
      <SourceLine classname="twitter4j.SpringCompatibilityTest" start="36" end="89" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java">
        <Message>At SpringCompatibilityTest.java:[lines 36-89]</Message>
      </SourceLine>
      <Message>In class twitter4j.SpringCompatibilityTest</Message>
    </Class>
    <Method classname="twitter4j.SpringCompatibilityTest" name="testFactoryInstantiation" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.SpringCompatibilityTest" start="54" end="65" startBytecode="0" endBytecode="36" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java"/>
      <Message>In method twitter4j.SpringCompatibilityTest.testFactoryInstantiation()</Message>
    </Method>
    <Type descriptor="Ltwitter4j/TwitterStream;" role="TYPE_FOUND">
      <SourceLine classname="twitter4j.TwitterStream" sourcefile="TwitterStream.java" sourcepath="twitter4j/TwitterStream.java">
        <Message>In TwitterStream.java</Message>
      </SourceLine>
      <Message>Actual type twitter4j.TwitterStream</Message>
    </Type>
    <Type descriptor="Ltwitter4j/TwitterStream;" role="TYPE_EXPECTED">
      <SourceLine classname="twitter4j.TwitterStream" sourcefile="TwitterStream.java" sourcepath="twitter4j/TwitterStream.java">
        <Message>In TwitterStream.java</Message>
      </SourceLine>
      <Message>Expected twitter4j.TwitterStream</Message>
    </Type>
    <SourceLine classname="twitter4j.SpringCompatibilityTest" primary="true" start="64" end="64" startBytecode="75" endBytecode="75" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java">
      <Message>At SpringCompatibilityTest.java:[line 64]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="BC_VACUOUS_INSTANCEOF" priority="2" rank="17" abbrev="BC" category="STYLE" instanceHash="531fc420abc05dcbc92e9f9d7fe40dc1" instanceOccurrenceNum="0" instanceOccurrenceMax="0" cweid="571">
    <ShortMessage>instanceof will always return true</ShortMessage>
    <LongMessage>instanceof will always return true for all non-null values in twitter4j.SpringCompatibilityTest.testTwitterInstantiation(), since all twitter4j.AsyncTwitter are instances of twitter4j.AsyncTwitter</LongMessage>
    <Class classname="twitter4j.SpringCompatibilityTest" primary="true">
      <SourceLine classname="twitter4j.SpringCompatibilityTest" start="36" end="89" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java">
        <Message>At SpringCompatibilityTest.java:[lines 36-89]</Message>
      </SourceLine>
      <Message>In class twitter4j.SpringCompatibilityTest</Message>
    </Class>
    <Method classname="twitter4j.SpringCompatibilityTest" name="testTwitterInstantiation" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.SpringCompatibilityTest" start="68" end="76" startBytecode="0" endBytecode="27" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java"/>
      <Message>In method twitter4j.SpringCompatibilityTest.testTwitterInstantiation()</Message>
    </Method>
    <Type descriptor="Ltwitter4j/AsyncTwitter;" role="TYPE_FOUND">
      <SourceLine classname="twitter4j.AsyncTwitter" sourcefile="AsyncTwitter.java" sourcepath="twitter4j/AsyncTwitter.java">
        <Message>In AsyncTwitter.java</Message>
      </SourceLine>
      <Message>Actual type twitter4j.AsyncTwitter</Message>
    </Type>
    <Type descriptor="Ltwitter4j/AsyncTwitter;" role="TYPE_EXPECTED">
      <SourceLine classname="twitter4j.AsyncTwitter" sourcefile="AsyncTwitter.java" sourcepath="twitter4j/AsyncTwitter.java">
        <Message>In AsyncTwitter.java</Message>
      </SourceLine>
      <Message>Expected twitter4j.AsyncTwitter</Message>
    </Type>
    <SourceLine classname="twitter4j.SpringCompatibilityTest" primary="true" start="72" end="72" startBytecode="34" endBytecode="34" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java">
      <Message>At SpringCompatibilityTest.java:[line 72]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="BC_VACUOUS_INSTANCEOF" priority="2" rank="17" abbrev="BC" category="STYLE" instanceHash="27950878659be271bf13b94ec2ff3c0b" instanceOccurrenceNum="0" instanceOccurrenceMax="0" cweid="571">
    <ShortMessage>instanceof will always return true</ShortMessage>
    <LongMessage>instanceof will always return true for all non-null values in twitter4j.SpringCompatibilityTest.testTwitterInstantiation(), since all twitter4j.Twitter are instances of twitter4j.Twitter</LongMessage>
    <Class classname="twitter4j.SpringCompatibilityTest" primary="true">
      <SourceLine classname="twitter4j.SpringCompatibilityTest" start="36" end="89" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java">
        <Message>At SpringCompatibilityTest.java:[lines 36-89]</Message>
      </SourceLine>
      <Message>In class twitter4j.SpringCompatibilityTest</Message>
    </Class>
    <Method classname="twitter4j.SpringCompatibilityTest" name="testTwitterInstantiation" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.SpringCompatibilityTest" start="68" end="76" startBytecode="0" endBytecode="27" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java"/>
      <Message>In method twitter4j.SpringCompatibilityTest.testTwitterInstantiation()</Message>
    </Method>
    <Type descriptor="Ltwitter4j/Twitter;" role="TYPE_FOUND">
      <SourceLine classname="twitter4j.Twitter" sourcefile="Twitter.java" sourcepath="twitter4j/Twitter.java">
        <Message>In Twitter.java</Message>
      </SourceLine>
      <Message>Actual type twitter4j.Twitter</Message>
    </Type>
    <Type descriptor="Ltwitter4j/Twitter;" role="TYPE_EXPECTED">
      <SourceLine classname="twitter4j.Twitter" sourcefile="Twitter.java" sourcepath="twitter4j/Twitter.java">
        <Message>In Twitter.java</Message>
      </SourceLine>
      <Message>Expected twitter4j.Twitter</Message>
    </Type>
    <SourceLine classname="twitter4j.SpringCompatibilityTest" primary="true" start="69" end="69" startBytecode="14" endBytecode="14" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java">
      <Message>At SpringCompatibilityTest.java:[line 69]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="BC_VACUOUS_INSTANCEOF" priority="2" rank="17" abbrev="BC" category="STYLE" instanceHash="3603aa8907518fa23fedf2dd457ff0d0" instanceOccurrenceNum="0" instanceOccurrenceMax="0" cweid="571">
    <ShortMessage>instanceof will always return true</ShortMessage>
    <LongMessage>instanceof will always return true for all non-null values in twitter4j.SpringCompatibilityTest.testTwitterInstantiation(), since all twitter4j.TwitterStream are instances of twitter4j.TwitterStream</LongMessage>
    <Class classname="twitter4j.SpringCompatibilityTest" primary="true">
      <SourceLine classname="twitter4j.SpringCompatibilityTest" start="36" end="89" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java">
        <Message>At SpringCompatibilityTest.java:[lines 36-89]</Message>
      </SourceLine>
      <Message>In class twitter4j.SpringCompatibilityTest</Message>
    </Class>
    <Method classname="twitter4j.SpringCompatibilityTest" name="testTwitterInstantiation" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.SpringCompatibilityTest" start="68" end="76" startBytecode="0" endBytecode="27" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java"/>
      <Message>In method twitter4j.SpringCompatibilityTest.testTwitterInstantiation()</Message>
    </Method>
    <Type descriptor="Ltwitter4j/TwitterStream;" role="TYPE_FOUND">
      <SourceLine classname="twitter4j.TwitterStream" sourcefile="TwitterStream.java" sourcepath="twitter4j/TwitterStream.java">
        <Message>In TwitterStream.java</Message>
      </SourceLine>
      <Message>Actual type twitter4j.TwitterStream</Message>
    </Type>
    <Type descriptor="Ltwitter4j/TwitterStream;" role="TYPE_EXPECTED">
      <SourceLine classname="twitter4j.TwitterStream" sourcefile="TwitterStream.java" sourcepath="twitter4j/TwitterStream.java">
        <Message>In TwitterStream.java</Message>
      </SourceLine>
      <Message>Expected twitter4j.TwitterStream</Message>
    </Type>
    <SourceLine classname="twitter4j.SpringCompatibilityTest" primary="true" start="75" end="75" startBytecode="54" endBytecode="54" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java">
      <Message>At SpringCompatibilityTest.java:[line 75]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="BED_BOGUS_EXCEPTION_DECLARATION" priority="2" rank="7" abbrev="BED" category="CORRECTNESS" instanceHash="9d8d8afea773a7e3eb6cd3549f6336a4" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Non derivable method declares throwing an exception that isn&apos;t thrown</ShortMessage>
    <LongMessage>Non derivable method twitter4j.SpringCompatibilityTest.deleteFile(String) declares throwing an exception that isn&apos;t thrown</LongMessage>
    <Class classname="twitter4j.SpringCompatibilityTest" primary="true">
      <SourceLine classname="twitter4j.SpringCompatibilityTest" start="36" end="89" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java">
        <Message>At SpringCompatibilityTest.java:[lines 36-89]</Message>
      </SourceLine>
      <Message>In class twitter4j.SpringCompatibilityTest</Message>
    </Class>
    <Method classname="twitter4j.SpringCompatibilityTest" name="deleteFile" signature="(Ljava/lang/String;)V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.SpringCompatibilityTest" start="87" end="89" startBytecode="0" endBytecode="84" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java"/>
      <Message>In method twitter4j.SpringCompatibilityTest.deleteFile(String)</Message>
    </Method>
    <SourceLine classname="twitter4j.SpringCompatibilityTest" primary="true" start="87" end="87" startBytecode="0" endBytecode="0" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java">
      <Message>At SpringCompatibilityTest.java:[line 87]</Message>
    </SourceLine>
    <String value="java.io.IOException">
      <Message>Value java.io.IOException</Message>
    </String>
  </BugInstance>
  <BugInstance type="DM_DEFAULT_ENCODING" priority="1" rank="19" abbrev="Dm" category="I18N" instanceHash="c860b63e0049160c54a8534e2155667f" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Reliance on default encoding</ShortMessage>
    <LongMessage>Found reliance on default encoding in twitter4j.SpringCompatibilityTest.writeFile(String, String): new java.io.FileWriter(File)</LongMessage>
    <Class classname="twitter4j.SpringCompatibilityTest" primary="true">
      <SourceLine classname="twitter4j.SpringCompatibilityTest" start="36" end="89" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java">
        <Message>At SpringCompatibilityTest.java:[lines 36-89]</Message>
      </SourceLine>
      <Message>In class twitter4j.SpringCompatibilityTest</Message>
    </Class>
    <Method classname="twitter4j.SpringCompatibilityTest" name="writeFile" signature="(Ljava/lang/String;Ljava/lang/String;)V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.SpringCompatibilityTest" start="79" end="84" startBytecode="0" endBytecode="144" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java"/>
      <Message>In method twitter4j.SpringCompatibilityTest.writeFile(String, String)</Message>
    </Method>
    <Method classname="java.io.FileWriter" name="&lt;init&gt;" signature="(Ljava/io/File;)V" isStatic="false" role="METHOD_CALLED">
      <SourceLine classname="java.io.FileWriter" start="90" end="91" startBytecode="0" endBytecode="68" sourcefile="FileWriter.java" sourcepath="java/io/FileWriter.java"/>
      <Message>Called method new java.io.FileWriter(File)</Message>
    </Method>
    <SourceLine classname="twitter4j.SpringCompatibilityTest" primary="true" start="81" end="81" startBytecode="23" endBytecode="23" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java">
      <Message>At SpringCompatibilityTest.java:[line 81]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="RV_RETURN_VALUE_IGNORED_BAD_PRACTICE" priority="2" rank="16" abbrev="RV" category="BAD_PRACTICE" instanceHash="44ed7cf88712d69b20595c3ba50a6a3a" instanceOccurrenceNum="0" instanceOccurrenceMax="0" cweid="253">
    <ShortMessage>Method ignores exceptional return value</ShortMessage>
    <LongMessage>Exceptional return value of java.io.File.delete() ignored in twitter4j.SpringCompatibilityTest.deleteFile(String)</LongMessage>
    <Class classname="twitter4j.SpringCompatibilityTest" primary="true">
      <SourceLine classname="twitter4j.SpringCompatibilityTest" start="36" end="89" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java">
        <Message>At SpringCompatibilityTest.java:[lines 36-89]</Message>
      </SourceLine>
      <Message>In class twitter4j.SpringCompatibilityTest</Message>
    </Class>
    <Method classname="twitter4j.SpringCompatibilityTest" name="deleteFile" signature="(Ljava/lang/String;)V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.SpringCompatibilityTest" start="87" end="89" startBytecode="0" endBytecode="84" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java"/>
      <Message>In method twitter4j.SpringCompatibilityTest.deleteFile(String)</Message>
    </Method>
    <Method classname="java.io.File" name="delete" signature="()Z" isStatic="false" role="METHOD_CALLED">
      <SourceLine classname="java.io.File" start="1028" end="1035" startBytecode="0" endBytecode="119" sourcefile="File.java" sourcepath="java/io/File.java"/>
      <Message>Called method java.io.File.delete()</Message>
    </Method>
    <SourceLine classname="twitter4j.SpringCompatibilityTest" primary="true" start="88" end="88" startBytecode="10" endBytecode="10" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java">
      <Message>At SpringCompatibilityTest.java:[line 88]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="RV_RETURN_VALUE_IGNORED_BAD_PRACTICE" priority="2" rank="16" abbrev="RV" category="BAD_PRACTICE" instanceHash="9b58052fe4faf00959c29183c825561c" instanceOccurrenceNum="0" instanceOccurrenceMax="0" cweid="253">
    <ShortMessage>Method ignores exceptional return value</ShortMessage>
    <LongMessage>Exceptional return value of java.io.File.delete() ignored in twitter4j.SpringCompatibilityTest.writeFile(String, String)</LongMessage>
    <Class classname="twitter4j.SpringCompatibilityTest" primary="true">
      <SourceLine classname="twitter4j.SpringCompatibilityTest" start="36" end="89" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java">
        <Message>At SpringCompatibilityTest.java:[lines 36-89]</Message>
      </SourceLine>
      <Message>In class twitter4j.SpringCompatibilityTest</Message>
    </Class>
    <Method classname="twitter4j.SpringCompatibilityTest" name="writeFile" signature="(Ljava/lang/String;Ljava/lang/String;)V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.SpringCompatibilityTest" start="79" end="84" startBytecode="0" endBytecode="144" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java"/>
      <Message>In method twitter4j.SpringCompatibilityTest.writeFile(String, String)</Message>
    </Method>
    <Method classname="java.io.File" name="delete" signature="()Z" isStatic="false" role="METHOD_CALLED">
      <SourceLine classname="java.io.File" start="1028" end="1035" startBytecode="0" endBytecode="119" sourcefile="File.java" sourcepath="java/io/File.java"/>
      <Message>Called method java.io.File.delete()</Message>
    </Method>
    <SourceLine classname="twitter4j.SpringCompatibilityTest" primary="true" start="80" end="80" startBytecode="10" endBytecode="10" sourcefile="SpringCompatibilityTest.java" sourcepath="twitter4j/SpringCompatibilityTest.java" relSourcepath="twitter4j/SpringCompatibilityTest.java">
      <Message>At SpringCompatibilityTest.java:[line 80]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="IMC_IMMATURE_CLASS_PRINTSTACKTRACE" priority="2" rank="17" abbrev="IMC" category="STYLE" instanceHash="c81a2683036f1b716ca82296211d6f4b" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method prints the stack trace to the console</ShortMessage>
    <LongMessage>Method twitter4j.StreamAPITest.onException(Exception) prints the stack trace to the console</LongMessage>
    <Class classname="twitter4j.StreamAPITest" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="29" end="373" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
        <Message>At StreamAPITest.java:[lines 29-373]</Message>
      </SourceLine>
      <Message>In class twitter4j.StreamAPITest</Message>
    </Class>
    <Method classname="twitter4j.StreamAPITest" name="onException" signature="(Ljava/lang/Exception;)V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="370" end="373" startBytecode="0" endBytecode="77" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java"/>
      <Message>In method twitter4j.StreamAPITest.onException(Exception)</Message>
    </Method>
    <SourceLine classname="twitter4j.StreamAPITest" primary="true" start="371" end="371" startBytecode="6" endBytecode="6" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
      <Message>At StreamAPITest.java:[line 371]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="IMC_IMMATURE_CLASS_PRINTSTACKTRACE" priority="2" rank="17" abbrev="IMC" category="STYLE" instanceHash="e3f47436bfe2c13520c327fa77feecaf" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method prints the stack trace to the console</ShortMessage>
    <LongMessage>Method twitter4j.StreamAPITest.onStatus(Status) prints the stack trace to the console</LongMessage>
    <Class classname="twitter4j.StreamAPITest" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="29" end="373" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
        <Message>At StreamAPITest.java:[lines 29-373]</Message>
      </SourceLine>
      <Message>In class twitter4j.StreamAPITest</Message>
    </Class>
    <Method classname="twitter4j.StreamAPITest" name="onStatus" signature="(Ltwitter4j/Status;)V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="322" end="335" startBytecode="0" endBytecode="175" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java"/>
      <Message>In method twitter4j.StreamAPITest.onStatus(Status)</Message>
    </Method>
    <SourceLine classname="twitter4j.StreamAPITest" primary="true" start="329" end="329" startBytecode="29" endBytecode="29" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
      <Message>At StreamAPITest.java:[line 329]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="IMC_IMMATURE_CLASS_PRINTSTACKTRACE" priority="2" rank="17" abbrev="IMC" category="STYLE" instanceHash="64e6730a9a9f821cd6e15caea2cff11e" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method prints the stack trace to the console</ShortMessage>
    <LongMessage>Method twitter4j.StreamAPITest.waitForNotification() prints the stack trace to the console</LongMessage>
    <Class classname="twitter4j.StreamAPITest" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="29" end="373" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
        <Message>At StreamAPITest.java:[lines 29-373]</Message>
      </SourceLine>
      <Message>In class twitter4j.StreamAPITest</Message>
    </Class>
    <Method classname="twitter4j.StreamAPITest" name="waitForNotification" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="312" end="317" startBytecode="0" endBytecode="103" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java"/>
      <Message>In method twitter4j.StreamAPITest.waitForNotification()</Message>
    </Method>
    <SourceLine classname="twitter4j.StreamAPITest" primary="true" start="315" end="315" startBytecode="20" endBytecode="20" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
      <Message>At StreamAPITest.java:[line 315]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="IMC_IMMATURE_CLASS_PRINTSTACKTRACE" priority="2" rank="17" abbrev="IMC" category="STYLE" instanceHash="173d1000ad25cb20068a6da16a8064a4" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method prints the stack trace to the console</ShortMessage>
    <LongMessage>Method twitter4j.StreamAPITest.waitForStatus() prints the stack trace to the console</LongMessage>
    <Class classname="twitter4j.StreamAPITest" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="29" end="373" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
        <Message>At StreamAPITest.java:[lines 29-373]</Message>
      </SourceLine>
      <Message>In class twitter4j.StreamAPITest</Message>
    </Class>
    <Method classname="twitter4j.StreamAPITest" name="waitForStatus" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="303" end="308" startBytecode="0" endBytecode="103" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java"/>
      <Message>In method twitter4j.StreamAPITest.waitForStatus()</Message>
    </Method>
    <SourceLine classname="twitter4j.StreamAPITest" primary="true" start="306" end="306" startBytecode="20" endBytecode="20" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
      <Message>At StreamAPITest.java:[line 306]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="ISB_TOSTRING_APPENDING" priority="2" rank="7" abbrev="ISB" category="CORRECTNESS" instanceHash="10ccef83d9a1d34fb22e595e710666f7" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method concatenates the result of a toString() call</ShortMessage>
    <LongMessage>Method twitter4j.StreamAPITest.onDeletionNotice(StatusDeletionNotice) concatenates the result of a toString() call</LongMessage>
    <Class classname="twitter4j.StreamAPITest" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="29" end="373" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
        <Message>At StreamAPITest.java:[lines 29-373]</Message>
      </SourceLine>
      <Message>In class twitter4j.StreamAPITest</Message>
    </Class>
    <Method classname="twitter4j.StreamAPITest" name="onDeletionNotice" signature="(Ltwitter4j/StatusDeletionNotice;)V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="341" end="344" startBytecode="0" endBytecode="101" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java"/>
      <Message>In method twitter4j.StreamAPITest.onDeletionNotice(StatusDeletionNotice)</Message>
    </Method>
    <SourceLine classname="twitter4j.StreamAPITest" primary="true" start="342" end="342" startBytecode="24" endBytecode="24" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
      <Message>At StreamAPITest.java:[line 342]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="NN_NAKED_NOTIFY" priority="2" rank="14" abbrev="NN" category="MT_CORRECTNESS" instanceHash="feb263407934dbb071877b2c2dfdee46" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Naked notify</ShortMessage>
    <LongMessage>Naked notify in twitter4j.StreamAPITest.notifyResponse()</LongMessage>
    <Class classname="twitter4j.StreamAPITest" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="29" end="373" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
        <Message>At StreamAPITest.java:[lines 29-373]</Message>
      </SourceLine>
      <Message>In class twitter4j.StreamAPITest</Message>
    </Class>
    <Method classname="twitter4j.StreamAPITest" name="notifyResponse" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="298" end="299" startBytecode="0" endBytecode="50" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java"/>
      <Message>In method twitter4j.StreamAPITest.notifyResponse()</Message>
    </Method>
    <SourceLine classname="twitter4j.StreamAPITest" primary="true" start="298" end="298" startBytecode="1" endBytecode="1" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
      <Message>At StreamAPITest.java:[line 298]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="NPMC_NON_PRODUCTIVE_METHOD_CALL" priority="2" rank="7" abbrev="NPMC" category="CORRECTNESS" instanceHash="f6e459d4cec29a7ecb0ce11ce1393353" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method ignores return value of a non mutating method</ShortMessage>
    <LongMessage>Method twitter4j.StreamAPITest.testToString() ignores return value of a non mutating method</LongMessage>
    <Class classname="twitter4j.StreamAPITest" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="29" end="373" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
        <Message>At StreamAPITest.java:[lines 29-373]</Message>
      </SourceLine>
      <Message>In class twitter4j.StreamAPITest</Message>
    </Class>
    <Method classname="twitter4j.StreamAPITest" name="testToString" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="58" end="59" startBytecode="0" endBytecode="60" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java"/>
      <Message>In method twitter4j.StreamAPITest.testToString()</Message>
    </Method>
    <SourceLine classname="twitter4j.StreamAPITest" primary="true" start="58" end="58" startBytecode="13" endBytecode="13" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
      <Message>At StreamAPITest.java:[line 58]</Message>
    </SourceLine>
    <String value="java/lang/Object@toString()Ljava/lang/String;">
      <Message>Value java/lang/Object@toString()Ljava/lang/String;</Message>
    </String>
  </BugInstance>
  <BugInstance type="RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT" priority="2" rank="17" abbrev="RV" category="STYLE" instanceHash="ae3306c630ccde1d021f30e5b7c95f9e" instanceOccurrenceNum="0" instanceOccurrenceMax="0" cweid="440">
    <ShortMessage>Return value of method without side effect is ignored</ShortMessage>
    <LongMessage>Return value of Object.toString() ignored, but method has no side effect</LongMessage>
    <Class classname="twitter4j.StreamAPITest" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="29" end="373" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
        <Message>At StreamAPITest.java:[lines 29-373]</Message>
      </SourceLine>
      <Message>In class twitter4j.StreamAPITest</Message>
    </Class>
    <Method classname="twitter4j.StreamAPITest" name="testToString" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="58" end="59" startBytecode="0" endBytecode="60" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java"/>
      <Message>In method twitter4j.StreamAPITest.testToString()</Message>
    </Method>
    <Method classname="java.lang.Object" name="toString" signature="()Ljava/lang/String;" isStatic="false" role="METHOD_CALLED">
      <SourceLine classname="java.lang.Object" start="237" end="237" startBytecode="0" endBytecode="77" sourcefile="Object.java" sourcepath="java/lang/Object.java"/>
      <Message>Called method Object.toString()</Message>
    </Method>
    <SourceLine classname="twitter4j.StreamAPITest" primary="true" start="58" end="58" startBytecode="10" endBytecode="10" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
      <Message>At StreamAPITest.java:[line 58]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="URF_UNREAD_FIELD" priority="2" rank="18" abbrev="UrF" category="PERFORMANCE" instanceHash="524caf983a080e0f041fc557a4059679" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Unread field</ShortMessage>
    <LongMessage>Unread field: twitter4j.StreamAPITest.warning</LongMessage>
    <Class classname="twitter4j.StreamAPITest" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="29" end="373" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
        <Message>At StreamAPITest.java:[lines 29-373]</Message>
      </SourceLine>
      <Message>In class twitter4j.StreamAPITest</Message>
    </Class>
    <Field classname="twitter4j.StreamAPITest" name="warning" signature="Ltwitter4j/StallWarning;" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
        <Message>In StreamAPITest.java</Message>
      </SourceLine>
      <Message>Field twitter4j.StreamAPITest.warning</Message>
    </Field>
    <SourceLine classname="twitter4j.StreamAPITest" primary="true" start="364" end="364" startBytecode="2" endBytecode="2" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
      <Message>At StreamAPITest.java:[line 364]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD" priority="2" rank="18" abbrev="UrF" category="STYLE" instanceHash="9d635afe421526cacbec9ad2fd3cfd56" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Unread public/protected field</ShortMessage>
    <LongMessage>Unread public/protected field: twitter4j.StreamAPITest.p</LongMessage>
    <Class classname="twitter4j.StreamAPITest" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="29" end="373" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
        <Message>At StreamAPITest.java:[lines 29-373]</Message>
      </SourceLine>
      <Message>In class twitter4j.StreamAPITest</Message>
    </Class>
    <Field classname="twitter4j.StreamAPITest" name="p" signature="Ljava/util/Properties;" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
        <Message>In StreamAPITest.java</Message>
      </SourceLine>
      <Message>Field twitter4j.StreamAPITest.p</Message>
    </Field>
    <SourceLine classname="twitter4j.StreamAPITest" primary="true" start="30" end="30" startBytecode="18" endBytecode="18" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
      <Message>At StreamAPITest.java:[line 30]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="UW_UNCOND_WAIT" priority="2" rank="14" abbrev="UW" category="MT_CORRECTNESS" instanceHash="96446efbb3b4d02f8c2fed333cb771cd" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Unconditional wait</ShortMessage>
    <LongMessage>Unconditional wait in twitter4j.StreamAPITest.testRawStreamListener()</LongMessage>
    <Class classname="twitter4j.StreamAPITest" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="29" end="373" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
        <Message>At StreamAPITest.java:[lines 29-373]</Message>
      </SourceLine>
      <Message>In class twitter4j.StreamAPITest</Message>
    </Class>
    <Method classname="twitter4j.StreamAPITest" name="testRawStreamListener" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="73" end="91" startBytecode="0" endBytecode="152" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java"/>
      <Message>In method twitter4j.StreamAPITest.testRawStreamListener()</Message>
    </Method>
    <SourceLine classname="twitter4j.StreamAPITest" primary="true" start="88" end="88" startBytecode="37" endBytecode="37" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
      <Message>At StreamAPITest.java:[line 88]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="WA_NOT_IN_LOOP" priority="2" rank="14" abbrev="Wa" category="MT_CORRECTNESS" instanceHash="105d25c012bd8894118e1756d23f57ca" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Wait not in loop </ShortMessage>
    <LongMessage>Wait not in loop in twitter4j.StreamAPITest.testRawStreamListener()</LongMessage>
    <Class classname="twitter4j.StreamAPITest" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="29" end="373" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
        <Message>At StreamAPITest.java:[lines 29-373]</Message>
      </SourceLine>
      <Message>In class twitter4j.StreamAPITest</Message>
    </Class>
    <Method classname="twitter4j.StreamAPITest" name="testRawStreamListener" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.StreamAPITest" start="73" end="91" startBytecode="0" endBytecode="152" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java"/>
      <Message>In method twitter4j.StreamAPITest.testRawStreamListener()</Message>
    </Method>
    <SourceLine classname="twitter4j.StreamAPITest" primary="true" start="88" end="88" startBytecode="37" endBytecode="37" sourcefile="StreamAPITest.java" sourcepath="twitter4j/StreamAPITest.java" relSourcepath="twitter4j/StreamAPITest.java">
      <Message>At StreamAPITest.java:[line 88]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="DM_BOXED_PRIMITIVE_FOR_PARSING" priority="1" rank="16" abbrev="Bx" category="PERFORMANCE" instanceHash="be0d68343aea81a2502c29a29723c059" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Boxing/unboxing to parse a primitive</ShortMessage>
    <LongMessage>Boxing/unboxing to parse a primitive twitter4j.TwitterTestBase.setUp()</LongMessage>
    <Class classname="twitter4j.TwitterTestBase" primary="true">
      <SourceLine classname="twitter4j.TwitterTestBase" start="28" end="105" sourcefile="TwitterTestBase.java" sourcepath="twitter4j/TwitterTestBase.java" relSourcepath="twitter4j/TwitterTestBase.java">
        <Message>At TwitterTestBase.java:[lines 28-105]</Message>
      </SourceLine>
      <Message>In class twitter4j.TwitterTestBase</Message>
    </Class>
    <Method classname="twitter4j.TwitterTestBase" name="setUp" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.TwitterTestBase" start="62" end="101" startBytecode="0" endBytecode="566" sourcefile="TwitterTestBase.java" sourcepath="twitter4j/TwitterTestBase.java" relSourcepath="twitter4j/TwitterTestBase.java"/>
      <Message>In method twitter4j.TwitterTestBase.setUp()</Message>
    </Method>
    <Method classname="java.lang.Integer" name="intValue" signature="()I" isStatic="false" role="METHOD_CALLED">
      <SourceLine classname="java.lang.Integer" start="701" end="701" startBytecode="0" endBytecode="46" sourcefile="Integer.java" sourcepath="java/lang/Integer.java"/>
      <Message>Called method Integer.intValue()</Message>
    </Method>
    <Method classname="java.lang.Integer" name="parseInt" signature="(Ljava/lang/String;)I" isStatic="true" role="SHOULD_CALL">
      <Message>Should call Integer.parseInt(String) instead</Message>
    </Method>
    <SourceLine classname="twitter4j.TwitterTestBase" primary="true" start="86" end="86" startBytecode="265" endBytecode="265" sourcefile="TwitterTestBase.java" sourcepath="twitter4j/TwitterTestBase.java" relSourcepath="twitter4j/TwitterTestBase.java">
      <Message>At TwitterTestBase.java:[line 86]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="NAB_NEEDLESS_BOXING_PARSE" priority="2" rank="18" abbrev="NAB" category="PERFORMANCE" instanceHash="51ccc9ff349116dc0f46988447f1c638" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method converts String to primitive using excessive boxing</ShortMessage>
    <LongMessage>Method twitter4j.TwitterTestBase.setUp() converts String to primitive using excessive boxing</LongMessage>
    <Class classname="twitter4j.TwitterTestBase" primary="true">
      <SourceLine classname="twitter4j.TwitterTestBase" start="28" end="105" sourcefile="TwitterTestBase.java" sourcepath="twitter4j/TwitterTestBase.java" relSourcepath="twitter4j/TwitterTestBase.java">
        <Message>At TwitterTestBase.java:[lines 28-105]</Message>
      </SourceLine>
      <Message>In class twitter4j.TwitterTestBase</Message>
    </Class>
    <Method classname="twitter4j.TwitterTestBase" name="setUp" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.TwitterTestBase" start="62" end="101" startBytecode="0" endBytecode="566" sourcefile="TwitterTestBase.java" sourcepath="twitter4j/TwitterTestBase.java" relSourcepath="twitter4j/TwitterTestBase.java"/>
      <Message>In method twitter4j.TwitterTestBase.setUp()</Message>
    </Method>
    <SourceLine classname="twitter4j.TwitterTestBase" primary="true" start="86" end="86" startBytecode="265" endBytecode="265" sourcefile="TwitterTestBase.java" sourcepath="twitter4j/TwitterTestBase.java" relSourcepath="twitter4j/TwitterTestBase.java">
      <Message>At TwitterTestBase.java:[line 86]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE" priority="2" rank="20" abbrev="OBL" category="EXPERIMENTAL" instanceHash="a540a3168a28b6f9647d9bd28ea3917c" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method may fail to clean up stream or resource on checked exception</ShortMessage>
    <LongMessage>twitter4j.TwitterTestBase.setUp() may fail to clean up java.io.InputStream on checked exception</LongMessage>
    <Class classname="twitter4j.TwitterTestBase" primary="true">
      <SourceLine classname="twitter4j.TwitterTestBase" start="28" end="105" sourcefile="TwitterTestBase.java" sourcepath="twitter4j/TwitterTestBase.java" relSourcepath="twitter4j/TwitterTestBase.java">
        <Message>At TwitterTestBase.java:[lines 28-105]</Message>
      </SourceLine>
      <Message>In class twitter4j.TwitterTestBase</Message>
    </Class>
    <Method classname="twitter4j.TwitterTestBase" name="setUp" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.TwitterTestBase" start="62" end="101" startBytecode="0" endBytecode="566" sourcefile="TwitterTestBase.java" sourcepath="twitter4j/TwitterTestBase.java" relSourcepath="twitter4j/TwitterTestBase.java"/>
      <Message>In method twitter4j.TwitterTestBase.setUp()</Message>
    </Method>
    <Class classname="java.io.InputStream" role="CLASS_REFTYPE">
      <SourceLine classname="java.io.InputStream" start="45" end="363" sourcefile="InputStream.java" sourcepath="java/io/InputStream.java">
        <Message>At InputStream.java:[lines 45-363]</Message>
      </SourceLine>
      <Message>Reference type java.io.InputStream</Message>
    </Class>
    <Int value="1" role="INT_OBLIGATIONS_REMAINING">
      <Message>1 instances of obligation remaining</Message>
    </Int>
    <SourceLine classname="twitter4j.TwitterTestBase" primary="true" start="63" end="63" startBytecode="9" endBytecode="9" sourcefile="TwitterTestBase.java" sourcepath="twitter4j/TwitterTestBase.java" relSourcepath="twitter4j/TwitterTestBase.java" role="SOURCE_LINE_OBLIGATION_CREATED">
      <Message>Obligation to clean up resource created at TwitterTestBase.java:[line 63] is not discharged</Message>
    </SourceLine>
    <SourceLine classname="twitter4j.TwitterTestBase" start="64" end="64" startBytecode="13" endBytecode="13" sourcefile="TwitterTestBase.java" sourcepath="twitter4j/TwitterTestBase.java" relSourcepath="twitter4j/TwitterTestBase.java" role="SOURCE_LINE_PATH_CONTINUES">
      <Message>Path continues at TwitterTestBase.java:[line 64]</Message>
    </SourceLine>
    <String value="{InputStream x 1}" role="STRING_REMAINING_OBLIGATIONS">
      <Message>Remaining obligations: {InputStream x 1}</Message>
    </String>
  </BugInstance>
  <BugInstance type="DM_BOXED_PRIMITIVE_FOR_PARSING" priority="1" rank="16" abbrev="Bx" category="PERFORMANCE" instanceHash="afb960983942c7e9f7e7019975f21479" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Boxing/unboxing to parse a primitive</ShortMessage>
    <LongMessage>Boxing/unboxing to parse a primitive new twitter4j.TwitterTestBase$TestUserInfo(TwitterTestBase, String)</LongMessage>
    <Class classname="twitter4j.TwitterTestBase$TestUserInfo" primary="true">
      <SourceLine classname="twitter4j.TwitterTestBase$TestUserInfo" start="47" end="53" sourcefile="TwitterTestBase.java" sourcepath="twitter4j/TwitterTestBase.java" relSourcepath="twitter4j/TwitterTestBase.java">
        <Message>At TwitterTestBase.java:[lines 47-53]</Message>
      </SourceLine>
      <Message>In class twitter4j.TwitterTestBase$TestUserInfo</Message>
    </Class>
    <Method classname="twitter4j.TwitterTestBase$TestUserInfo" name="&lt;init&gt;" signature="(Ltwitter4j/TwitterTestBase;Ljava/lang/String;)V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.TwitterTestBase$TestUserInfo" start="47" end="53" startBytecode="0" endBytecode="241" sourcefile="TwitterTestBase.java" sourcepath="twitter4j/TwitterTestBase.java" relSourcepath="twitter4j/TwitterTestBase.java"/>
      <Message>In method new twitter4j.TwitterTestBase$TestUserInfo(TwitterTestBase, String)</Message>
    </Method>
    <Method classname="java.lang.Long" name="longValue" signature="()J" isStatic="false" role="METHOD_CALLED">
      <SourceLine classname="java.lang.Long" start="734" end="734" startBytecode="0" endBytecode="46" sourcefile="Long.java" sourcepath="java/lang/Long.java"/>
      <Message>Called method Long.longValue()</Message>
    </Method>
    <Method classname="java.lang.Long" name="parseLong" signature="(Ljava/lang/String;)J" isStatic="true" role="SHOULD_CALL">
      <Message>Should call Long.parseLong(String) instead</Message>
    </Method>
    <SourceLine classname="twitter4j.TwitterTestBase$TestUserInfo" primary="true" start="50" end="50" startBytecode="99" endBytecode="99" sourcefile="TwitterTestBase.java" sourcepath="twitter4j/TwitterTestBase.java" relSourcepath="twitter4j/TwitterTestBase.java">
      <Message>At TwitterTestBase.java:[line 50]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="NAB_NEEDLESS_BOXING_PARSE" priority="2" rank="18" abbrev="NAB" category="PERFORMANCE" instanceHash="7518cb1eb003e6469e9a61b54ef46c71" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method converts String to primitive using excessive boxing</ShortMessage>
    <LongMessage>Method new twitter4j.TwitterTestBase$TestUserInfo(TwitterTestBase, String) converts String to primitive using excessive boxing</LongMessage>
    <Class classname="twitter4j.TwitterTestBase$TestUserInfo" primary="true">
      <SourceLine classname="twitter4j.TwitterTestBase$TestUserInfo" start="47" end="53" sourcefile="TwitterTestBase.java" sourcepath="twitter4j/TwitterTestBase.java" relSourcepath="twitter4j/TwitterTestBase.java">
        <Message>At TwitterTestBase.java:[lines 47-53]</Message>
      </SourceLine>
      <Message>In class twitter4j.TwitterTestBase$TestUserInfo</Message>
    </Class>
    <Method classname="twitter4j.TwitterTestBase$TestUserInfo" name="&lt;init&gt;" signature="(Ltwitter4j/TwitterTestBase;Ljava/lang/String;)V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.TwitterTestBase$TestUserInfo" start="47" end="53" startBytecode="0" endBytecode="241" sourcefile="TwitterTestBase.java" sourcepath="twitter4j/TwitterTestBase.java" relSourcepath="twitter4j/TwitterTestBase.java"/>
      <Message>In method new twitter4j.TwitterTestBase$TestUserInfo(TwitterTestBase, String)</Message>
    </Method>
    <SourceLine classname="twitter4j.TwitterTestBase$TestUserInfo" primary="true" start="50" end="50" startBytecode="99" endBytecode="99" sourcefile="TwitterTestBase.java" sourcepath="twitter4j/TwitterTestBase.java" relSourcepath="twitter4j/TwitterTestBase.java">
      <Message>At TwitterTestBase.java:[line 50]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="CLI_CONSTANT_LIST_INDEX" priority="2" rank="7" abbrev="CLI" category="CORRECTNESS" instanceHash="6cfeaae965728a1565cc22f2e960a8" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method accesses list or array with constant index</ShortMessage>
    <LongMessage>Method twitter4j.UserStreamTest.assertReceived(String, Object) accesses list or array with constant index</LongMessage>
    <Class classname="twitter4j.UserStreamTest" primary="true">
      <SourceLine classname="twitter4j.UserStreamTest" start="34" end="411" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java">
        <Message>At UserStreamTest.java:[lines 34-411]</Message>
      </SourceLine>
      <Message>In class twitter4j.UserStreamTest</Message>
    </Class>
    <Method classname="twitter4j.UserStreamTest" name="assertReceived" signature="(Ljava/lang/String;Ljava/lang/Object;)V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.UserStreamTest" start="207" end="215" startBytecode="0" endBytecode="179" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java"/>
      <Message>In method twitter4j.UserStreamTest.assertReceived(String, Object)</Message>
    </Method>
    <SourceLine classname="twitter4j.UserStreamTest" primary="true" start="209" end="209" startBytecode="39" endBytecode="39" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java">
      <Message>At UserStreamTest.java:[line 209]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="CLI_CONSTANT_LIST_INDEX" priority="2" rank="7" abbrev="CLI" category="CORRECTNESS" instanceHash="3342c54c7857bc9d56f95db1a24369ca" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method accesses list or array with constant index</ShortMessage>
    <LongMessage>Method twitter4j.UserStreamTest.testDisplayURLNullCase() accesses list or array with constant index</LongMessage>
    <Class classname="twitter4j.UserStreamTest" primary="true">
      <SourceLine classname="twitter4j.UserStreamTest" start="34" end="411" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java">
        <Message>At UserStreamTest.java:[lines 34-411]</Message>
      </SourceLine>
      <Message>In class twitter4j.UserStreamTest</Message>
    </Class>
    <Method classname="twitter4j.UserStreamTest" name="testDisplayURLNullCase" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.UserStreamTest" start="231" end="236" startBytecode="0" endBytecode="139" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java"/>
      <Message>In method twitter4j.UserStreamTest.testDisplayURLNullCase()</Message>
    </Method>
    <SourceLine classname="twitter4j.UserStreamTest" primary="true" start="233" end="233" startBytecode="15" endBytecode="15" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java">
      <Message>At UserStreamTest.java:[line 233]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="CLI_CONSTANT_LIST_INDEX" priority="2" rank="7" abbrev="CLI" category="CORRECTNESS" instanceHash="6cf492d78f4ce4e4ca53dfffe144c55d" instanceOccurrenceNum="0" instanceOccurrenceMax="1">
    <ShortMessage>Method accesses list or array with constant index</ShortMessage>
    <LongMessage>Method twitter4j.UserStreamTest.testUserStream() accesses list or array with constant index</LongMessage>
    <Class classname="twitter4j.UserStreamTest" primary="true">
      <SourceLine classname="twitter4j.UserStreamTest" start="34" end="411" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java">
        <Message>At UserStreamTest.java:[lines 34-411]</Message>
      </SourceLine>
      <Message>In class twitter4j.UserStreamTest</Message>
    </Class>
    <Method classname="twitter4j.UserStreamTest" name="testUserStream" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.UserStreamTest" start="80" end="204" startBytecode="0" endBytecode="1425" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java"/>
      <Message>In method twitter4j.UserStreamTest.testUserStream()</Message>
    </Method>
    <SourceLine classname="twitter4j.UserStreamTest" primary="true" start="195" end="195" startBytecode="885" endBytecode="885" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java">
      <Message>At UserStreamTest.java:[line 195]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="CLI_CONSTANT_LIST_INDEX" priority="2" rank="7" abbrev="CLI" category="CORRECTNESS" instanceHash="6cf492d78f4ce4e4ca53dfffe144c55d" instanceOccurrenceNum="1" instanceOccurrenceMax="1">
    <ShortMessage>Method accesses list or array with constant index</ShortMessage>
    <LongMessage>Method twitter4j.UserStreamTest.testUserStream() accesses list or array with constant index</LongMessage>
    <Class classname="twitter4j.UserStreamTest" primary="true">
      <SourceLine classname="twitter4j.UserStreamTest" start="34" end="411" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java">
        <Message>At UserStreamTest.java:[lines 34-411]</Message>
      </SourceLine>
      <Message>In class twitter4j.UserStreamTest</Message>
    </Class>
    <Method classname="twitter4j.UserStreamTest" name="testUserStream" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.UserStreamTest" start="80" end="204" startBytecode="0" endBytecode="1425" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java"/>
      <Message>In method twitter4j.UserStreamTest.testUserStream()</Message>
    </Method>
    <SourceLine classname="twitter4j.UserStreamTest" primary="true" start="196" end="196" startBytecode="895" endBytecode="895" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java">
      <Message>At UserStreamTest.java:[line 196]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="IMC_IMMATURE_CLASS_PRINTSTACKTRACE" priority="2" rank="17" abbrev="IMC" category="STYLE" instanceHash="f5327c5a33255b3b648a0159cf73a1e0" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method prints the stack trace to the console</ShortMessage>
    <LongMessage>Method twitter4j.UserStreamTest.onException(Exception) prints the stack trace to the console</LongMessage>
    <Class classname="twitter4j.UserStreamTest" primary="true">
      <SourceLine classname="twitter4j.UserStreamTest" start="34" end="411" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java">
        <Message>At UserStreamTest.java:[lines 34-411]</Message>
      </SourceLine>
      <Message>In class twitter4j.UserStreamTest</Message>
    </Class>
    <Method classname="twitter4j.UserStreamTest" name="onException" signature="(Ljava/lang/Exception;)V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.UserStreamTest" start="407" end="411" startBytecode="0" endBytecode="102" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java"/>
      <Message>In method twitter4j.UserStreamTest.onException(Exception)</Message>
    </Method>
    <SourceLine classname="twitter4j.UserStreamTest" primary="true" start="409" end="409" startBytecode="27" endBytecode="27" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java">
      <Message>At UserStreamTest.java:[line 409]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="IMC_IMMATURE_CLASS_PRINTSTACKTRACE" priority="2" rank="17" abbrev="IMC" category="STYLE" instanceHash="22ba32da154fb91bf9dae5331ecca138" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method prints the stack trace to the console</ShortMessage>
    <LongMessage>Method twitter4j.UserStreamTest.waitForStatus(String) prints the stack trace to the console</LongMessage>
    <Class classname="twitter4j.UserStreamTest" primary="true">
      <SourceLine classname="twitter4j.UserStreamTest" start="34" end="411" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java">
        <Message>At UserStreamTest.java:[lines 34-411]</Message>
      </SourceLine>
      <Message>In class twitter4j.UserStreamTest</Message>
    </Class>
    <Method classname="twitter4j.UserStreamTest" name="waitForStatus" signature="(Ljava/lang/String;)V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.UserStreamTest" start="218" end="225" startBytecode="0" endBytecode="195" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java"/>
      <Message>In method twitter4j.UserStreamTest.waitForStatus(String)</Message>
    </Method>
    <SourceLine classname="twitter4j.UserStreamTest" primary="true" start="223" end="223" startBytecode="98" endBytecode="98" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java">
      <Message>At UserStreamTest.java:[line 223]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="NN_NAKED_NOTIFY" priority="2" rank="14" abbrev="NN" category="MT_CORRECTNESS" instanceHash="f40ca80c0762085fc3f8c6a6022bc909" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Naked notify</ShortMessage>
    <LongMessage>Naked notify in twitter4j.UserStreamTest.notifyResponse()</LongMessage>
    <Class classname="twitter4j.UserStreamTest" primary="true">
      <SourceLine classname="twitter4j.UserStreamTest" start="34" end="411" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java">
        <Message>At UserStreamTest.java:[lines 34-411]</Message>
      </SourceLine>
      <Message>In class twitter4j.UserStreamTest</Message>
    </Class>
    <Method classname="twitter4j.UserStreamTest" name="notifyResponse" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.UserStreamTest" start="241" end="242" startBytecode="0" endBytecode="50" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java"/>
      <Message>In method twitter4j.UserStreamTest.notifyResponse()</Message>
    </Method>
    <SourceLine classname="twitter4j.UserStreamTest" primary="true" start="241" end="241" startBytecode="1" endBytecode="1" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java">
      <Message>At UserStreamTest.java:[line 241]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="UWF_NULL_FIELD" priority="2" rank="12" abbrev="UwF" category="CORRECTNESS" instanceHash="33d2db7cae029378ddcea455027f3702" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Field only ever set to null</ShortMessage>
    <LongMessage>Field only ever set to null: twitter4j.UserStreamTest.ex</LongMessage>
    <Class classname="twitter4j.UserStreamTest" primary="true">
      <SourceLine classname="twitter4j.UserStreamTest" start="34" end="411" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java">
        <Message>At UserStreamTest.java:[lines 34-411]</Message>
      </SourceLine>
      <Message>In class twitter4j.UserStreamTest</Message>
    </Class>
    <Field classname="twitter4j.UserStreamTest" name="ex" signature="Ljava/lang/Exception;" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.UserStreamTest" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java">
        <Message>In UserStreamTest.java</Message>
      </SourceLine>
      <Message>Field twitter4j.UserStreamTest.ex</Message>
    </Field>
    <SourceLine classname="twitter4j.UserStreamTest" sourcefile="UserStreamTest.java" sourcepath="twitter4j/UserStreamTest.java" relSourcepath="twitter4j/UserStreamTest.java" synthetic="true">
      <Message>In UserStreamTest.java</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="CLI_CONSTANT_LIST_INDEX" priority="2" rank="7" abbrev="CLI" category="CORRECTNESS" instanceHash="8daa62d164209765e9863971adf3ca2d" instanceOccurrenceNum="0" instanceOccurrenceMax="11">
    <ShortMessage>Method accesses list or array with constant index</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testPlaceAsJSON() accesses list or array with constant index</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testPlaceAsJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="624" end="690" startBytecode="0" endBytecode="1105" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testPlaceAsJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="641" end="641" startBytecode="204" endBytecode="204" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 641]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="CLI_CONSTANT_LIST_INDEX" priority="2" rank="7" abbrev="CLI" category="CORRECTNESS" instanceHash="8daa62d164209765e9863971adf3ca2d" instanceOccurrenceNum="1" instanceOccurrenceMax="11">
    <ShortMessage>Method accesses list or array with constant index</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testPlaceAsJSON() accesses list or array with constant index</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testPlaceAsJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="624" end="690" startBytecode="0" endBytecode="1105" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testPlaceAsJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="642" end="642" startBytecode="224" endBytecode="224" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 642]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="CLI_CONSTANT_LIST_INDEX" priority="2" rank="7" abbrev="CLI" category="CORRECTNESS" instanceHash="8daa62d164209765e9863971adf3ca2d" instanceOccurrenceNum="2" instanceOccurrenceMax="11">
    <ShortMessage>Method accesses list or array with constant index</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testPlaceAsJSON() accesses list or array with constant index</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testPlaceAsJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="624" end="690" startBytecode="0" endBytecode="1105" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testPlaceAsJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="643" end="643" startBytecode="244" endBytecode="244" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 643]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="CLI_CONSTANT_LIST_INDEX" priority="2" rank="7" abbrev="CLI" category="CORRECTNESS" instanceHash="8daa62d164209765e9863971adf3ca2d" instanceOccurrenceNum="3" instanceOccurrenceMax="11">
    <ShortMessage>Method accesses list or array with constant index</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testPlaceAsJSON() accesses list or array with constant index</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testPlaceAsJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="624" end="690" startBytecode="0" endBytecode="1105" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testPlaceAsJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="644" end="644" startBytecode="264" endBytecode="264" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 644]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="CLI_CONSTANT_LIST_INDEX" priority="2" rank="7" abbrev="CLI" category="CORRECTNESS" instanceHash="8daa62d164209765e9863971adf3ca2d" instanceOccurrenceNum="4" instanceOccurrenceMax="11">
    <ShortMessage>Method accesses list or array with constant index</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testPlaceAsJSON() accesses list or array with constant index</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testPlaceAsJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="624" end="690" startBytecode="0" endBytecode="1105" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testPlaceAsJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="645" end="645" startBytecode="284" endBytecode="284" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 645]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="CLI_CONSTANT_LIST_INDEX" priority="2" rank="7" abbrev="CLI" category="CORRECTNESS" instanceHash="8daa62d164209765e9863971adf3ca2d" instanceOccurrenceNum="5" instanceOccurrenceMax="11">
    <ShortMessage>Method accesses list or array with constant index</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testPlaceAsJSON() accesses list or array with constant index</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testPlaceAsJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="624" end="690" startBytecode="0" endBytecode="1105" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testPlaceAsJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="646" end="646" startBytecode="304" endBytecode="304" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 646]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="CLI_CONSTANT_LIST_INDEX" priority="2" rank="7" abbrev="CLI" category="CORRECTNESS" instanceHash="8daa62d164209765e9863971adf3ca2d" instanceOccurrenceNum="6" instanceOccurrenceMax="11">
    <ShortMessage>Method accesses list or array with constant index</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testPlaceAsJSON() accesses list or array with constant index</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testPlaceAsJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="624" end="690" startBytecode="0" endBytecode="1105" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testPlaceAsJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="667" end="667" startBytecode="537" endBytecode="537" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 667]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="CLI_CONSTANT_LIST_INDEX" priority="2" rank="7" abbrev="CLI" category="CORRECTNESS" instanceHash="8daa62d164209765e9863971adf3ca2d" instanceOccurrenceNum="7" instanceOccurrenceMax="11">
    <ShortMessage>Method accesses list or array with constant index</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testPlaceAsJSON() accesses list or array with constant index</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testPlaceAsJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="624" end="690" startBytecode="0" endBytecode="1105" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testPlaceAsJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="668" end="668" startBytecode="557" endBytecode="557" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 668]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="CLI_CONSTANT_LIST_INDEX" priority="2" rank="7" abbrev="CLI" category="CORRECTNESS" instanceHash="8daa62d164209765e9863971adf3ca2d" instanceOccurrenceNum="8" instanceOccurrenceMax="11">
    <ShortMessage>Method accesses list or array with constant index</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testPlaceAsJSON() accesses list or array with constant index</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testPlaceAsJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="624" end="690" startBytecode="0" endBytecode="1105" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testPlaceAsJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="669" end="669" startBytecode="577" endBytecode="577" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 669]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="CLI_CONSTANT_LIST_INDEX" priority="2" rank="7" abbrev="CLI" category="CORRECTNESS" instanceHash="8daa62d164209765e9863971adf3ca2d" instanceOccurrenceNum="9" instanceOccurrenceMax="11">
    <ShortMessage>Method accesses list or array with constant index</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testPlaceAsJSON() accesses list or array with constant index</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testPlaceAsJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="624" end="690" startBytecode="0" endBytecode="1105" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testPlaceAsJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="670" end="670" startBytecode="597" endBytecode="597" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 670]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="CLI_CONSTANT_LIST_INDEX" priority="2" rank="7" abbrev="CLI" category="CORRECTNESS" instanceHash="8daa62d164209765e9863971adf3ca2d" instanceOccurrenceNum="10" instanceOccurrenceMax="11">
    <ShortMessage>Method accesses list or array with constant index</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testPlaceAsJSON() accesses list or array with constant index</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testPlaceAsJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="624" end="690" startBytecode="0" endBytecode="1105" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testPlaceAsJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="671" end="671" startBytecode="617" endBytecode="617" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 671]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="CLI_CONSTANT_LIST_INDEX" priority="2" rank="7" abbrev="CLI" category="CORRECTNESS" instanceHash="8daa62d164209765e9863971adf3ca2d" instanceOccurrenceNum="11" instanceOccurrenceMax="11">
    <ShortMessage>Method accesses list or array with constant index</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testPlaceAsJSON() accesses list or array with constant index</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testPlaceAsJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="624" end="690" startBytecode="0" endBytecode="1105" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testPlaceAsJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="672" end="672" startBytecode="637" endBytecode="637" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 672]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="DLS_DEAD_LOCAL_STORE" priority="1" rank="15" abbrev="DLS" category="STYLE" instanceHash="bbd5e5ff03a7511a0dc485adeff1ae4b" instanceOccurrenceNum="0" instanceOccurrenceMax="0" cweid="563">
    <ShortMessage>Dead store to local variable</ShortMessage>
    <LongMessage>Dead store to status in twitter4j.internal.json.DAOTest.testSchema()</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testSchema" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="171" end="349" startBytecode="0" endBytecode="624" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testSchema()</Message>
    </Method>
    <LocalVariable name="status" register="5" pc="766" role="LOCAL_VARIABLE_NAMED">
      <Message>Local variable named status</Message>
    </LocalVariable>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="308" end="308" startBytecode="764" endBytecode="764" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 308]</Message>
    </SourceLine>
    <Property name="edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.DEAD_OBJECT_STORE" value="true"/>
    <Property name="edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.LOCAL_NAME" value="status"/>
    <Property name="edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.METHOD_RESULT" value="true"/>
  </BugInstance>
  <BugInstance type="DLS_DEAD_LOCAL_STORE" priority="1" rank="15" abbrev="DLS" category="STYLE" instanceHash="80632dbfa57f56779c4ecbb334849da1" instanceOccurrenceNum="0" instanceOccurrenceMax="0" cweid="563">
    <ShortMessage>Dead store to local variable</ShortMessage>
    <LongMessage>Dead store to user in twitter4j.internal.json.DAOTest.testSchema()</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testSchema" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="171" end="349" startBytecode="0" endBytecode="624" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testSchema()</Message>
    </Method>
    <LocalVariable name="user" register="6" pc="994" role="LOCAL_VARIABLE_NAMED">
      <Message>Local variable named user</Message>
    </LocalVariable>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="348" end="348" startBytecode="992" endBytecode="992" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 348]</Message>
    </SourceLine>
    <Property name="edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.DEAD_OBJECT_STORE" value="true"/>
    <Property name="edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.LOCAL_NAME" value="user"/>
    <Property name="edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.METHOD_RESULT" value="true"/>
  </BugInstance>
  <BugInstance type="DM_DEFAULT_ENCODING" priority="1" rank="19" abbrev="Dm" category="I18N" instanceHash="affb4a09dce4b4de16c7070e63f38239" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Reliance on default encoding</ShortMessage>
    <LongMessage>Found reliance on default encoding in twitter4j.internal.json.DAOTest.getStringFromClassPath(String): new java.io.InputStreamReader(InputStream)</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="getStringFromClassPath" signature="(Ljava/lang/String;)Ljava/lang/String;" isStatic="true" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="498" end="518" startBytecode="0" endBytecode="324" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.getStringFromClassPath(String)</Message>
    </Method>
    <Method classname="java.io.InputStreamReader" name="&lt;init&gt;" signature="(Ljava/io/InputStream;)V" isStatic="false" role="METHOD_CALLED">
      <SourceLine classname="java.io.InputStreamReader" start="72" end="79" startBytecode="0" endBytecode="146" sourcefile="InputStreamReader.java" sourcepath="java/io/InputStreamReader.java"/>
      <Message>Called method new java.io.InputStreamReader(InputStream)</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="506" end="506" startBytecode="51" endBytecode="51" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 506]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="IMC_IMMATURE_CLASS_PRINTSTACKTRACE" priority="2" rank="17" abbrev="IMC" category="STYLE" instanceHash="5432a223cdda619d9a84e4aa2df84971" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method prints the stack trace to the console</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testUnparsable() prints the stack trace to the console</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testUnparsable" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="95" end="128" startBytecode="0" endBytecode="472" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testUnparsable()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="116" end="116" startBytecode="107" endBytecode="107" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 116]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="ITC_INHERITANCE_TYPE_CHECKING" priority="2" rank="17" abbrev="ITC" category="STYLE" instanceHash="6af7c8bd1597d04d24634019653a2536" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method uses instanceof on multiple types to arbitrate logic</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.validateJSONSchema(Object, String[]) uses instanceof on multiple types to arbitrate logic</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="validateJSONSchema" signature="(Ljava/lang/Object;[Ljava/lang/String;)V" isStatic="true" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="425" end="432" startBytecode="0" endBytecode="138" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.validateJSONSchema(Object, String[])</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="425" end="425" startBytecode="0" endBytecode="0" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 425]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="LSC_LITERAL_STRING_COMPARISON" priority="1" rank="17" abbrev="LSC" category="STYLE" instanceHash="bb4dbfac9449da3ea913712bf30a51ce" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method makes literal string comparisons passing the literal as an argument</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.validateJSONObjectSchema(JSONObject, String[]) makes literal string comparisons passing the literal as an argument</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="validateJSONObjectSchema" signature="(Ltwitter4j/internal/org/json/JSONObject;[Ljava/lang/String;)Ltwitter4j/internal/org/json/JSONObject;" isStatic="true" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="358" end="417" startBytecode="0" endBytecode="972" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.validateJSONObjectSchema(JSONObject, String[])</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="404" end="404" startBytecode="465" endBytecode="465" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 404]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="MOM_MISLEADING_OVERLOAD_MODEL" priority="2" rank="19" abbrev="MOM" category="STYLE" instanceHash="885a89f55aaf021ac337c6114369a521" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Class &apos;overloads&apos; a method with both instance and static versions</ShortMessage>
    <LongMessage>Class twitter4j.internal.json.DAOTest &apos;overloads&apos; a method with both instance and static versions</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="getJSONObjectFromPostURL" signature="(Ljava/lang/String;)Ltwitter4j/internal/org/json/JSONObject;" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="466" end="469" startBytecode="0" endBytecode="114" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.getJSONObjectFromPostURL(String)</Message>
    </Method>
    <String value="getJSONObjectFromPostURL">
      <Message>Value getJSONObjectFromPostURL</Message>
    </String>
    <SourceLine classname="twitter4j.internal.json.DAOTest" start="466" end="469" startBytecode="0" endBytecode="114" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java" synthetic="true">
      <Message>At DAOTest.java:[lines 466-469]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="MOM_MISLEADING_OVERLOAD_MODEL" priority="2" rank="19" abbrev="MOM" category="STYLE" instanceHash="58fdad9667ded489aff8b8f88619337d" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Class &apos;overloads&apos; a method with both instance and static versions</ShortMessage>
    <LongMessage>Class twitter4j.internal.json.DAOTest &apos;overloads&apos; a method with both instance and static versions</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="validateJSONArraySchema" signature="(Ltwitter4j/internal/org/json/JSONArray;[Ljava/lang/String;)Ltwitter4j/internal/org/json/JSONArray;" isStatic="true" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="435" end="442" startBytecode="0" endBytecode="150" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.validateJSONArraySchema(JSONArray, String[])</Message>
    </Method>
    <String value="validateJSONArraySchema">
      <Message>Value validateJSONArraySchema</Message>
    </String>
    <SourceLine classname="twitter4j.internal.json.DAOTest" start="435" end="442" startBytecode="0" endBytecode="150" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java" synthetic="true">
      <Message>At DAOTest.java:[lines 435-442]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="MOM_MISLEADING_OVERLOAD_MODEL" priority="2" rank="19" abbrev="MOM" category="STYLE" instanceHash="dc79dfa45e65f1e23848c33a8a73b867" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Class &apos;overloads&apos; a method with both instance and static versions</ShortMessage>
    <LongMessage>Class twitter4j.internal.json.DAOTest &apos;overloads&apos; a method with both instance and static versions</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="validateJSONObjectSchema" signature="(Ltwitter4j/internal/org/json/JSONObject;[Ljava/lang/String;)Ltwitter4j/internal/org/json/JSONObject;" isStatic="true" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="358" end="417" startBytecode="0" endBytecode="972" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.validateJSONObjectSchema(JSONObject, String[])</Message>
    </Method>
    <String value="validateJSONObjectSchema">
      <Message>Value validateJSONObjectSchema</Message>
    </String>
    <SourceLine classname="twitter4j.internal.json.DAOTest" start="358" end="417" startBytecode="0" endBytecode="972" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java" synthetic="true">
      <Message>At DAOTest.java:[lines 358-417]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="NAB_NEEDLESS_BOXING_PARSE" priority="2" rank="18" abbrev="NAB" category="PERFORMANCE" instanceHash="736838f220d405312d09599d550b65d9" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method converts String to primitive using excessive boxing</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testSchema() converts String to primitive using excessive boxing</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testSchema" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="171" end="349" startBytecode="0" endBytecode="1236" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testSchema()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="171" end="171" startBytecode="11" endBytecode="11" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 171]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="OBJECT_DESERIALIZATION" priority="1" rank="10" abbrev="SECOBDES" category="SECURITY" instanceHash="9907d467be4ecd6a99ed2283950de37c" instanceOccurrenceNum="0" instanceOccurrenceMax="0" cweid="502">
    <ShortMessage>Object deserialization is used in {1}</ShortMessage>
    <LongMessage>Object deserialization is used in twitter4j.internal.json.DAOTest.assertDeserializedFormIsEqual(Object)</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="assertDeserializedFormIsEqual" signature="(Ljava/lang/Object;)Ljava/lang/Object;" isStatic="true" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="719" end="729" startBytecode="0" endBytecode="204" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.assertDeserializedFormIsEqual(Object)</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="725" end="725" startBytecode="50" endBytecode="50" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 725]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="OS_OPEN_STREAM" priority="2" rank="16" abbrev="OS" category="BAD_PRACTICE" instanceHash="a10a50762230170e7794edef9d6208f1" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method may fail to close stream</ShortMessage>
    <LongMessage>twitter4j.internal.json.DAOTest.getStringFromClassPath(String) may fail to close stream</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="getStringFromClassPath" signature="(Ljava/lang/String;)Ljava/lang/String;" isStatic="true" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="498" end="518" startBytecode="0" endBytecode="71" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.getStringFromClassPath(String)</Message>
    </Method>
    <Type descriptor="Ljava/io/Reader;" role="TYPE_CLOSEIT">
      <SourceLine classname="java.io.Reader" start="66" end="249" sourcefile="Reader.java" sourcepath="java/io/Reader.java">
        <Message>At Reader.java:[lines 66-249]</Message>
      </SourceLine>
      <Message>Need to close java.io.Reader </Message>
    </Type>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="507" end="507" startBytecode="55" endBytecode="55" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 507]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="SACM_STATIC_ARRAY_CREATED_IN_METHOD" priority="1" rank="16" abbrev="SACM" category="PERFORMANCE" instanceHash="ba0a610d85d3b402ad9bccfc1fa5dce8" instanceOccurrenceNum="0" instanceOccurrenceMax="6">
    <ShortMessage>Method creates array using constants</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testSchema() creates array using constants</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testSchema" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="171" end="349" startBytecode="0" endBytecode="1236" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testSchema()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="196" end="196" startBytecode="292" endBytecode="292" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 196]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="SACM_STATIC_ARRAY_CREATED_IN_METHOD" priority="1" rank="16" abbrev="SACM" category="PERFORMANCE" instanceHash="ba0a610d85d3b402ad9bccfc1fa5dce8" instanceOccurrenceNum="1" instanceOccurrenceMax="6">
    <ShortMessage>Method creates array using constants</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testSchema() creates array using constants</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testSchema" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="171" end="349" startBytecode="0" endBytecode="1236" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testSchema()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="233" end="233" startBytecode="398" endBytecode="398" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 233]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="SACM_STATIC_ARRAY_CREATED_IN_METHOD" priority="1" rank="16" abbrev="SACM" category="PERFORMANCE" instanceHash="ba0a610d85d3b402ad9bccfc1fa5dce8" instanceOccurrenceNum="2" instanceOccurrenceMax="6">
    <ShortMessage>Method creates array using constants</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testSchema() creates array using constants</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testSchema" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="171" end="349" startBytecode="0" endBytecode="1236" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testSchema()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="255" end="255" startBytecode="480" endBytecode="480" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 255]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="SACM_STATIC_ARRAY_CREATED_IN_METHOD" priority="1" rank="16" abbrev="SACM" category="PERFORMANCE" instanceHash="ba0a610d85d3b402ad9bccfc1fa5dce8" instanceOccurrenceNum="3" instanceOccurrenceMax="6">
    <ShortMessage>Method creates array using constants</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testSchema() creates array using constants</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testSchema" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="171" end="349" startBytecode="0" endBytecode="1236" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testSchema()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="285" end="285" startBytecode="747" endBytecode="747" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 285]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="SACM_STATIC_ARRAY_CREATED_IN_METHOD" priority="1" rank="16" abbrev="SACM" category="PERFORMANCE" instanceHash="ba0a610d85d3b402ad9bccfc1fa5dce8" instanceOccurrenceNum="4" instanceOccurrenceMax="6">
    <ShortMessage>Method creates array using constants</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testSchema() creates array using constants</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testSchema" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="171" end="349" startBytecode="0" endBytecode="1236" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testSchema()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="310" end="310" startBytecode="975" endBytecode="975" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 310]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="SACM_STATIC_ARRAY_CREATED_IN_METHOD" priority="2" rank="18" abbrev="SACM" category="PERFORMANCE" instanceHash="ba0a610d85d3b402ad9bccfc1fa5dce8" instanceOccurrenceNum="5" instanceOccurrenceMax="6">
    <ShortMessage>Method creates array using constants</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testSchema() creates array using constants</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testSchema" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="171" end="349" startBytecode="0" endBytecode="1236" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testSchema()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="176" end="176" startBytecode="37" endBytecode="37" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 176]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="SACM_STATIC_ARRAY_CREATED_IN_METHOD" priority="2" rank="18" abbrev="SACM" category="PERFORMANCE" instanceHash="ba0a610d85d3b402ad9bccfc1fa5dce8" instanceOccurrenceNum="6" instanceOccurrenceMax="6">
    <ShortMessage>Method creates array using constants</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testSchema() creates array using constants</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testSchema" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="171" end="349" startBytecode="0" endBytecode="1236" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testSchema()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="185" end="185" startBytecode="96" endBytecode="96" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 185]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="SPP_USE_GETPROPERTY" priority="2" rank="17" abbrev="SPP" category="STYLE" instanceHash="3fd9f88d0868fd3cd9dd368f1a583e7a" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method calls getProperties just to get one property, use getProperty instead</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testSchema() calls getProperties just to get one property, use getProperty instead</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testSchema" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="171" end="349" startBytecode="0" endBytecode="1236" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testSchema()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="171" end="171" startBytecode="5" endBytecode="5" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 171]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="SPP_USE_ISEMPTY" priority="2" rank="17" abbrev="SPP" category="STYLE" instanceHash="166bbdfa8da46c792dd841e62b3f7f2b" instanceOccurrenceNum="0" instanceOccurrenceMax="3">
    <ShortMessage>Method checks the size of a collection against zero rather than using isEmpty()</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testEmptyJSON() checks the size of a collection against zero rather than using isEmpty()</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testEmptyJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="55" end="76" startBytecode="0" endBytecode="355" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testEmptyJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="59" end="59" startBytecode="28" endBytecode="28" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 59]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="SPP_USE_ISEMPTY" priority="2" rank="17" abbrev="SPP" category="STYLE" instanceHash="166bbdfa8da46c792dd841e62b3f7f2b" instanceOccurrenceNum="1" instanceOccurrenceMax="3">
    <ShortMessage>Method checks the size of a collection against zero rather than using isEmpty()</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testEmptyJSON() checks the size of a collection against zero rather than using isEmpty()</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testEmptyJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="55" end="76" startBytecode="0" endBytecode="355" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testEmptyJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="64" end="64" startBytecode="64" endBytecode="64" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 64]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="SPP_USE_ISEMPTY" priority="2" rank="17" abbrev="SPP" category="STYLE" instanceHash="166bbdfa8da46c792dd841e62b3f7f2b" instanceOccurrenceNum="2" instanceOccurrenceMax="3">
    <ShortMessage>Method checks the size of a collection against zero rather than using isEmpty()</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testEmptyJSON() checks the size of a collection against zero rather than using isEmpty()</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testEmptyJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="55" end="76" startBytecode="0" endBytecode="355" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testEmptyJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="69" end="69" startBytecode="102" endBytecode="102" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 69]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="SPP_USE_ISEMPTY" priority="2" rank="17" abbrev="SPP" category="STYLE" instanceHash="166bbdfa8da46c792dd841e62b3f7f2b" instanceOccurrenceNum="3" instanceOccurrenceMax="3">
    <ShortMessage>Method checks the size of a collection against zero rather than using isEmpty()</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.testEmptyJSON() checks the size of a collection against zero rather than using isEmpty()</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testEmptyJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="55" end="76" startBytecode="0" endBytecode="355" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testEmptyJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="74" end="74" startBytecode="146" endBytecode="146" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 74]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="UCPM_USE_CHARACTER_PARAMETERIZED_METHOD" priority="2" rank="18" abbrev="UCPM" category="PERFORMANCE" instanceHash="2bd2e1275a35e8169b5af863a2d5d4d1" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method passes constant String of length 1 to character overridden method</ShortMessage>
    <LongMessage>Method twitter4j.internal.json.DAOTest.validateJSONObjectSchema(JSONObject, String[]) passes constant String of length 1 to character overridden method</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="validateJSONObjectSchema" signature="(Ltwitter4j/internal/org/json/JSONObject;[Ljava/lang/String;)Ltwitter4j/internal/org/json/JSONObject;" isStatic="true" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="358" end="417" startBytecode="0" endBytecode="972" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.validateJSONObjectSchema(JSONObject, String[])</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="370" end="370" startBytecode="111" endBytecode="111" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 370]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="UPM_UNCALLED_PRIVATE_METHOD" priority="2" rank="18" abbrev="UPM" category="PERFORMANCE" instanceHash="83cdaca5634d7e6c05a2f42f9857e3e3" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Private method is never called</ShortMessage>
    <LongMessage>Private method twitter4j.internal.json.DAOTest.getJSONObjectFromPostURL(String) is never called</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="getJSONObjectFromPostURL" signature="(Ljava/lang/String;)Ltwitter4j/internal/org/json/JSONObject;" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="466" end="469" startBytecode="0" endBytecode="114" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.getJSONObjectFromPostURL(String)</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" start="466" end="469" startBytecode="0" endBytecode="114" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java" synthetic="true">
      <Message>At DAOTest.java:[lines 466-469]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="UTAO_JUNIT_ASSERTION_ODDITIES_ACTUAL_CONSTANT" priority="2" rank="20" abbrev="UTAO" category="STYLE" instanceHash="5e3615ba505fb00e8f97c835eabbc637" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>JUnit test method passes constant to second (actual) assertion parameter</ShortMessage>
    <LongMessage>JUnit test method twitter4j.internal.json.DAOTest.testPlaceAsJSON() passes constant to second (actual) assertion parameter</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testPlaceAsJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="624" end="690" startBytecode="0" endBytecode="1105" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testPlaceAsJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="683" end="683" startBytecode="722" endBytecode="722" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 683]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="UTAO_JUNIT_ASSERTION_ODDITIES_IMPOSSIBLE_NULL" priority="2" rank="10" abbrev="UTAO" category="CORRECTNESS" instanceHash="74093b0619b1086daf152dfb1c124f92" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>JUnit test method asserts that an autoboxed value is not null</ShortMessage>
    <LongMessage>JUnit test method twitter4j.internal.json.DAOTest.testStatusJSONImplSupportsMoreThan100RetweetedStatus() asserts that an autoboxed value is not null</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testStatusJSONImplSupportsMoreThan100RetweetedStatus" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="745" end="748" startBytecode="0" endBytecode="107" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testStatusJSONImplSupportsMoreThan100RetweetedStatus()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="747" end="747" startBytecode="40" endBytecode="40" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 747]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="UTAO_JUNIT_ASSERTION_ODDITIES_USE_ASSERT_NOT_EQUALS" priority="2" rank="10" abbrev="UTAO" category="CORRECTNESS" instanceHash="28a6ec5d8ce0713e28f31a482391d383" instanceOccurrenceNum="0" instanceOccurrenceMax="3">
    <ShortMessage>JUnit test method passes boolean expression to Assert.assertFalse / Assert.assertTrue</ShortMessage>
    <LongMessage>JUnit test method twitter4j.internal.json.DAOTest.testEmptyJSON() passes boolean expression to Assert.assertFalse / Assert.assertTrue</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testEmptyJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="55" end="76" startBytecode="0" endBytecode="355" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testEmptyJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="59" end="59" startBytecode="36" endBytecode="36" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 59]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="UTAO_JUNIT_ASSERTION_ODDITIES_USE_ASSERT_NOT_EQUALS" priority="2" rank="10" abbrev="UTAO" category="CORRECTNESS" instanceHash="28a6ec5d8ce0713e28f31a482391d383" instanceOccurrenceNum="1" instanceOccurrenceMax="3">
    <ShortMessage>JUnit test method passes boolean expression to Assert.assertFalse / Assert.assertTrue</ShortMessage>
    <LongMessage>JUnit test method twitter4j.internal.json.DAOTest.testEmptyJSON() passes boolean expression to Assert.assertFalse / Assert.assertTrue</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testEmptyJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="55" end="76" startBytecode="0" endBytecode="355" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testEmptyJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="64" end="64" startBytecode="72" endBytecode="72" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 64]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="UTAO_JUNIT_ASSERTION_ODDITIES_USE_ASSERT_NOT_EQUALS" priority="2" rank="10" abbrev="UTAO" category="CORRECTNESS" instanceHash="28a6ec5d8ce0713e28f31a482391d383" instanceOccurrenceNum="2" instanceOccurrenceMax="3">
    <ShortMessage>JUnit test method passes boolean expression to Assert.assertFalse / Assert.assertTrue</ShortMessage>
    <LongMessage>JUnit test method twitter4j.internal.json.DAOTest.testEmptyJSON() passes boolean expression to Assert.assertFalse / Assert.assertTrue</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testEmptyJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="55" end="76" startBytecode="0" endBytecode="355" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testEmptyJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="69" end="69" startBytecode="110" endBytecode="110" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 69]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="UTAO_JUNIT_ASSERTION_ODDITIES_USE_ASSERT_NOT_EQUALS" priority="2" rank="10" abbrev="UTAO" category="CORRECTNESS" instanceHash="28a6ec5d8ce0713e28f31a482391d383" instanceOccurrenceNum="3" instanceOccurrenceMax="3">
    <ShortMessage>JUnit test method passes boolean expression to Assert.assertFalse / Assert.assertTrue</ShortMessage>
    <LongMessage>JUnit test method twitter4j.internal.json.DAOTest.testEmptyJSON() passes boolean expression to Assert.assertFalse / Assert.assertTrue</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testEmptyJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="55" end="76" startBytecode="0" endBytecode="355" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testEmptyJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="74" end="74" startBytecode="154" endBytecode="154" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 74]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="UTAO_JUNIT_ASSERTION_ODDITIES_USE_ASSERT_NULL" priority="2" rank="10" abbrev="UTAO" category="CORRECTNESS" instanceHash="91f4e2091744f453d0c5d3ec06dd8a52" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>JUnit test method passes null Assert.assertEquals</ShortMessage>
    <LongMessage>JUnit test method twitter4j.internal.json.DAOTest.testRetweetStatusAsJSON() passes null to Assert.assertEquals</LongMessage>
    <Class classname="twitter4j.internal.json.DAOTest" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="40" end="748" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
        <Message>At DAOTest.java:[lines 40-748]</Message>
      </SourceLine>
      <Message>In class twitter4j.internal.json.DAOTest</Message>
    </Class>
    <Method classname="twitter4j.internal.json.DAOTest" name="testRetweetStatusAsJSON" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.internal.json.DAOTest" start="597" end="611" startBytecode="0" endBytecode="270" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java"/>
      <Message>In method twitter4j.internal.json.DAOTest.testRetweetStatusAsJSON()</Message>
    </Method>
    <SourceLine classname="twitter4j.internal.json.DAOTest" primary="true" start="601" end="601" startBytecode="65" endBytecode="65" sourcefile="DAOTest.java" sourcepath="twitter4j/internal/json/DAOTest.java" relSourcepath="twitter4j/internal/json/DAOTest.java">
      <Message>At DAOTest.java:[line 601]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="SSCU_SUSPICIOUS_SHADED_CLASS_USE" priority="2" rank="7" abbrev="SSCU" category="CORRECTNESS" instanceHash="af9f35e3fe649868adfc70427feb732" instanceOccurrenceNum="0" instanceOccurrenceMax="5">
    <ShortMessage>Method calls a method from a class that has been shaded by a 3rdparty jar</ShortMessage>
    <LongMessage>Method twitter4j.json.JSONObjectTypeTest.testDetermine() calls a method from a class that has been shaded by a 3rdparty jar</LongMessage>
    <Class classname="twitter4j.json.JSONObjectTypeTest" primary="true">
      <SourceLine classname="twitter4j.json.JSONObjectTypeTest" start="12" end="57" sourcefile="JSONObjectTypeTest.java" sourcepath="twitter4j/json/JSONObjectTypeTest.java" relSourcepath="twitter4j/json/JSONObjectTypeTest.java">
        <Message>At JSONObjectTypeTest.java:[lines 12-57]</Message>
      </SourceLine>
      <Message>In class twitter4j.json.JSONObjectTypeTest</Message>
    </Class>
    <Method classname="twitter4j.json.JSONObjectTypeTest" name="testDetermine" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.json.JSONObjectTypeTest" start="26" end="57" startBytecode="0" endBytecode="320" sourcefile="JSONObjectTypeTest.java" sourcepath="twitter4j/json/JSONObjectTypeTest.java" relSourcepath="twitter4j/json/JSONObjectTypeTest.java"/>
      <Message>In method twitter4j.json.JSONObjectTypeTest.testDetermine()</Message>
    </Method>
    <SourceLine classname="twitter4j.json.JSONObjectTypeTest" primary="true" start="26" end="26" startBytecode="6" endBytecode="6" sourcefile="JSONObjectTypeTest.java" sourcepath="twitter4j/json/JSONObjectTypeTest.java" relSourcepath="twitter4j/json/JSONObjectTypeTest.java">
      <Message>At JSONObjectTypeTest.java:[line 26]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="SSCU_SUSPICIOUS_SHADED_CLASS_USE" priority="2" rank="7" abbrev="SSCU" category="CORRECTNESS" instanceHash="af9f35e3fe649868adfc70427feb732" instanceOccurrenceNum="1" instanceOccurrenceMax="5">
    <ShortMessage>Method calls a method from a class that has been shaded by a 3rdparty jar</ShortMessage>
    <LongMessage>Method twitter4j.json.JSONObjectTypeTest.testDetermine() calls a method from a class that has been shaded by a 3rdparty jar</LongMessage>
    <Class classname="twitter4j.json.JSONObjectTypeTest" primary="true">
      <SourceLine classname="twitter4j.json.JSONObjectTypeTest" start="12" end="57" sourcefile="JSONObjectTypeTest.java" sourcepath="twitter4j/json/JSONObjectTypeTest.java" relSourcepath="twitter4j/json/JSONObjectTypeTest.java">
        <Message>At JSONObjectTypeTest.java:[lines 12-57]</Message>
      </SourceLine>
      <Message>In class twitter4j.json.JSONObjectTypeTest</Message>
    </Class>
    <Method classname="twitter4j.json.JSONObjectTypeTest" name="testDetermine" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.json.JSONObjectTypeTest" start="26" end="57" startBytecode="0" endBytecode="320" sourcefile="JSONObjectTypeTest.java" sourcepath="twitter4j/json/JSONObjectTypeTest.java" relSourcepath="twitter4j/json/JSONObjectTypeTest.java"/>
      <Message>In method twitter4j.json.JSONObjectTypeTest.testDetermine()</Message>
    </Method>
    <SourceLine classname="twitter4j.json.JSONObjectTypeTest" primary="true" start="31" end="31" startBytecode="36" endBytecode="36" sourcefile="JSONObjectTypeTest.java" sourcepath="twitter4j/json/JSONObjectTypeTest.java" relSourcepath="twitter4j/json/JSONObjectTypeTest.java">
      <Message>At JSONObjectTypeTest.java:[line 31]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="SSCU_SUSPICIOUS_SHADED_CLASS_USE" priority="2" rank="7" abbrev="SSCU" category="CORRECTNESS" instanceHash="af9f35e3fe649868adfc70427feb732" instanceOccurrenceNum="2" instanceOccurrenceMax="5">
    <ShortMessage>Method calls a method from a class that has been shaded by a 3rdparty jar</ShortMessage>
    <LongMessage>Method twitter4j.json.JSONObjectTypeTest.testDetermine() calls a method from a class that has been shaded by a 3rdparty jar</LongMessage>
    <Class classname="twitter4j.json.JSONObjectTypeTest" primary="true">
      <SourceLine classname="twitter4j.json.JSONObjectTypeTest" start="12" end="57" sourcefile="JSONObjectTypeTest.java" sourcepath="twitter4j/json/JSONObjectTypeTest.java" relSourcepath="twitter4j/json/JSONObjectTypeTest.java">
        <Message>At JSONObjectTypeTest.java:[lines 12-57]</Message>
      </SourceLine>
      <Message>In class twitter4j.json.JSONObjectTypeTest</Message>
    </Class>
    <Method classname="twitter4j.json.JSONObjectTypeTest" name="testDetermine" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.json.JSONObjectTypeTest" start="26" end="57" startBytecode="0" endBytecode="320" sourcefile="JSONObjectTypeTest.java" sourcepath="twitter4j/json/JSONObjectTypeTest.java" relSourcepath="twitter4j/json/JSONObjectTypeTest.java"/>
      <Message>In method twitter4j.json.JSONObjectTypeTest.testDetermine()</Message>
    </Method>
    <SourceLine classname="twitter4j.json.JSONObjectTypeTest" primary="true" start="36" end="36" startBytecode="66" endBytecode="66" sourcefile="JSONObjectTypeTest.java" sourcepath="twitter4j/json/JSONObjectTypeTest.java" relSourcepath="twitter4j/json/JSONObjectTypeTest.java">
      <Message>At JSONObjectTypeTest.java:[line 36]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="SSCU_SUSPICIOUS_SHADED_CLASS_USE" priority="2" rank="7" abbrev="SSCU" category="CORRECTNESS" instanceHash="af9f35e3fe649868adfc70427feb732" instanceOccurrenceNum="3" instanceOccurrenceMax="5">
    <ShortMessage>Method calls a method from a class that has been shaded by a 3rdparty jar</ShortMessage>
    <LongMessage>Method twitter4j.json.JSONObjectTypeTest.testDetermine() calls a method from a class that has been shaded by a 3rdparty jar</LongMessage>
    <Class classname="twitter4j.json.JSONObjectTypeTest" primary="true">
      <SourceLine classname="twitter4j.json.JSONObjectTypeTest" start="12" end="57" sourcefile="JSONObjectTypeTest.java" sourcepath="twitter4j/json/JSONObjectTypeTest.java" relSourcepath="twitter4j/json/JSONObjectTypeTest.java">
        <Message>At JSONObjectTypeTest.java:[lines 12-57]</Message>
      </SourceLine>
      <Message>In class twitter4j.json.JSONObjectTypeTest</Message>
    </Class>
    <Method classname="twitter4j.json.JSONObjectTypeTest" name="testDetermine" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.json.JSONObjectTypeTest" start="26" end="57" startBytecode="0" endBytecode="320" sourcefile="JSONObjectTypeTest.java" sourcepath="twitter4j/json/JSONObjectTypeTest.java" relSourcepath="twitter4j/json/JSONObjectTypeTest.java"/>
      <Message>In method twitter4j.json.JSONObjectTypeTest.testDetermine()</Message>
    </Method>
    <SourceLine classname="twitter4j.json.JSONObjectTypeTest" primary="true" start="41" end="41" startBytecode="96" endBytecode="96" sourcefile="JSONObjectTypeTest.java" sourcepath="twitter4j/json/JSONObjectTypeTest.java" relSourcepath="twitter4j/json/JSONObjectTypeTest.java">
      <Message>At JSONObjectTypeTest.java:[line 41]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="SSCU_SUSPICIOUS_SHADED_CLASS_USE" priority="2" rank="7" abbrev="SSCU" category="CORRECTNESS" instanceHash="af9f35e3fe649868adfc70427feb732" instanceOccurrenceNum="4" instanceOccurrenceMax="5">
    <ShortMessage>Method calls a method from a class that has been shaded by a 3rdparty jar</ShortMessage>
    <LongMessage>Method twitter4j.json.JSONObjectTypeTest.testDetermine() calls a method from a class that has been shaded by a 3rdparty jar</LongMessage>
    <Class classname="twitter4j.json.JSONObjectTypeTest" primary="true">
      <SourceLine classname="twitter4j.json.JSONObjectTypeTest" start="12" end="57" sourcefile="JSONObjectTypeTest.java" sourcepath="twitter4j/json/JSONObjectTypeTest.java" relSourcepath="twitter4j/json/JSONObjectTypeTest.java">
        <Message>At JSONObjectTypeTest.java:[lines 12-57]</Message>
      </SourceLine>
      <Message>In class twitter4j.json.JSONObjectTypeTest</Message>
    </Class>
    <Method classname="twitter4j.json.JSONObjectTypeTest" name="testDetermine" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.json.JSONObjectTypeTest" start="26" end="57" startBytecode="0" endBytecode="320" sourcefile="JSONObjectTypeTest.java" sourcepath="twitter4j/json/JSONObjectTypeTest.java" relSourcepath="twitter4j/json/JSONObjectTypeTest.java"/>
      <Message>In method twitter4j.json.JSONObjectTypeTest.testDetermine()</Message>
    </Method>
    <SourceLine classname="twitter4j.json.JSONObjectTypeTest" primary="true" start="46" end="46" startBytecode="126" endBytecode="126" sourcefile="JSONObjectTypeTest.java" sourcepath="twitter4j/json/JSONObjectTypeTest.java" relSourcepath="twitter4j/json/JSONObjectTypeTest.java">
      <Message>At JSONObjectTypeTest.java:[line 46]</Message>
    </SourceLine>
  </BugInstance>
  <BugInstance type="SSCU_SUSPICIOUS_SHADED_CLASS_USE" priority="2" rank="7" abbrev="SSCU" category="CORRECTNESS" instanceHash="af9f35e3fe649868adfc70427feb732" instanceOccurrenceNum="5" instanceOccurrenceMax="5">
    <ShortMessage>Method calls a method from a class that has been shaded by a 3rdparty jar</ShortMessage>
    <LongMessage>Method twitter4j.json.JSONObjectTypeTest.testDetermine() calls a method from a class that has been shaded by a 3rdparty jar</LongMessage>
    <Class classname="twitter4j.json.JSONObjectTypeTest" primary="true">
      <SourceLine classname="twitter4j.json.JSONObjectTypeTest" start="12" end="57" sourcefile="JSONObjectTypeTest.java" sourcepath="twitter4j/json/JSONObjectTypeTest.java" relSourcepath="twitter4j/json/JSONObjectTypeTest.java">
        <Message>At JSONObjectTypeTest.java:[lines 12-57]</Message>
      </SourceLine>
      <Message>In class twitter4j.json.JSONObjectTypeTest</Message>
    </Class>
    <Method classname="twitter4j.json.JSONObjectTypeTest" name="testDetermine" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="twitter4j.json.JSONObjectTypeTest" start="26" end="57" startBytecode="0" endBytecode="320" sourcefile="JSONObjectTypeTest.java" sourcepath="twitter4j/json/JSONObjectTypeTest.java" relSourcepath="twitter4j/json/JSONObjectTypeTest.java"/>
      <Message>In method twitter4j.json.JSONObjectTypeTest.testDetermine()</Message>
    </Method>
    <SourceLine classname="twitter4j.json.JSONObjectTypeTest" primary="true" start="52" end="52" startBytecode="158" endBytecode="158" sourcefile="JSONObjectTypeTest.java" sourcepath="twitter4j/json/JSONObjectTypeTest.java" relSourcepath="twitter4j/json/JSONObjectTypeTest.java">
      <Message>At JSONObjectTypeTest.java:[line 52]</Message>
    </SourceLine>
  </BugInstance>
  <BugCategory category="STYLE">
    <Description>Dodgy code</Description>
  </BugCategory>
  <BugCategory category="BAD_PRACTICE">
    <Description>Bad practice</Description>
  </BugCategory>
  <BugCategory category="CORRECTNESS">
    <Description>Correctness</Description>
  </BugCategory>
  <BugCategory category="I18N">
    <Description>Internationalization</Description>
  </BugCategory>
  <BugCategory category="SECURITY">
    <Description>Security</Description>
  </BugCategory>
  <BugCategory category="PERFORMANCE">
    <Description>Performance</Description>
  </BugCategory>
  <BugCategory category="MT_CORRECTNESS">
    <Description>Multithreaded correctness</Description>
  </BugCategory>
  <BugCategory category="EXPERIMENTAL">
    <Description>Experimental</Description>
  </BugCategory>
  <BugPattern type="WA_NOT_IN_LOOP" abbrev="Wa" category="MT_CORRECTNESS">
    <ShortDescription>Wait not in loop </ShortDescription>
    <Details><![CDATA[

  <p> This method contains a call to <code>java.lang.Object.wait()</code>
  which is not in a loop.&nbsp; If the monitor is used for multiple conditions,
  the condition the caller intended to wait for might not be the one
  that actually occurred.</p>

    ]]></Details>
  </BugPattern>
  <BugPattern type="BED_BOGUS_EXCEPTION_DECLARATION" abbrev="BED" category="CORRECTNESS">
    <ShortDescription>Non derivable method declares throwing an exception that isn&apos;t thrown</ShortDescription>
    <Details><![CDATA[
			
			<p>This method declares that it throws a checked exception that it does not throw. As this method is
			either a constructor, static method or private method, there is no reason for this method to declare
			the exception in its throws clause, and just causes calling methods to unnecessarily handle an exception
			that will never be thrown. The exception in question should be removed from the throws clause.</p>
			
		]]></Details>
  </BugPattern>
  <BugPattern type="RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT" abbrev="RV" category="STYLE">
    <ShortDescription>Return value of method without side effect is ignored</ShortDescription>
    <Details><![CDATA[

<p>This code calls a method and ignores the return value. However our analysis shows that
the method (including its implementations in subclasses if any) does not produce any effect 
other than return value. Thus this call can be removed.
</p>
<p>We are trying to reduce the false positives as much as possible, but in some cases this warning might be wrong.
Common false-positive cases include:</p>
<p>- The method is designed to be overridden and produce a side effect in other projects which are out of the scope of the analysis.</p>
<p>- The method is called to trigger the class loading which may have a side effect.</p>
<p>- The method is called just to get some exception.</p>
<p>If you feel that our assumption is incorrect, you can use a @CheckReturnValue annotation
to instruct FindBugs that ignoring the return value of this method is acceptable.
</p>

    ]]></Details>
  </BugPattern>
  <BugPattern type="SACM_STATIC_ARRAY_CREATED_IN_METHOD" abbrev="SACM" category="PERFORMANCE">
    <ShortDescription>Method creates array using constants</ShortDescription>
    <Details><![CDATA[
			
			<p>This method creates an array initialized by constants. Each time this method is called
			this array will be recreated. It would be more performant to define the array as a
			static field of the class instead.</p>
			
		]]></Details>
  </BugPattern>
  <BugPattern type="UPM_UNCALLED_PRIVATE_METHOD" abbrev="UPM" category="PERFORMANCE">
    <ShortDescription>Private method is never called</ShortDescription>
    <Details><![CDATA[

<p> This private method is never called. Although it is
possible that the method will be invoked through reflection,
it is more likely that the method is never used, and should be
removed.
</p>

]]></Details>
  </BugPattern>
  <BugPattern type="LSC_LITERAL_STRING_COMPARISON" abbrev="LSC" category="STYLE">
    <ShortDescription>Method makes literal string comparisons passing the literal as an argument</ShortDescription>
    <Details><![CDATA[
			
			<p>This line is in the form of <br/>
<pre><code>String str = ...
str.equals("someOtherString");
//or
str.compareTo("someOtherString");</code></pre>
		    </p>
			<p>A <code>NullPointerException</code> may occur if the String variable <code>str</code> is <code>null</code>. If instead the code was restructured to<br/>
<pre><code>String str = ...
"someOtherString".equals(str);
//or
"someOtherString".compareTo(str);</code></pre><br/>
			that is, call <code>equals()</code> or <code>compareTo()</code> on the string literal, passing the 
			variable as an argument, this exception could never happen as both <code>equals()</code> and 
			<code>compareTo()</code> check for <code>null</code>.</p>
			
		]]></Details>
  </BugPattern>
  <BugPattern type="PRMC_POSSIBLY_REDUNDANT_METHOD_CALLS" abbrev="PRMC" category="PERFORMANCE">
    <ShortDescription>Method appears to call the same method on the same object redundantly</ShortDescription>
    <Details><![CDATA[
			
			<p>This method makes two consecutive calls to the same method using the same constant
			parameters, on the same instance without any intervening changes to the objects. If this
			method does not make changes to the object, which it appears it doesn't, then making
			two calls is just a waste. These method calls could be combined by assigning the
			result into a temporary variable, and using the variable the second time.</p>
			
		]]></Details>
  </BugPattern>
  <BugPattern type="OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE" abbrev="OBL" category="EXPERIMENTAL">
    <ShortDescription>Method may fail to clean up stream or resource on checked exception</ShortDescription>
    <Details><![CDATA[
          
          <p>
          This method may fail to clean up (close, dispose of) a stream,
          database object, or other
          resource requiring an explicit cleanup operation.
          </p>

          <p>
          In general, if a method opens a stream or other resource,
          the method should use a try/finally block to ensure that
          the stream or resource is cleaned up before the method
          returns.
          </p>

          <p>
          This bug pattern is essentially the same as the
          OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE
          bug patterns, but is based on a different
          (and hopefully better) static analysis technique.
          We are interested is getting feedback about the
          usefulness of this bug pattern.
          To send feedback, either:
          </p>
          <ul>
            <li>send email to findbugs@cs.umd.edu</li>
            <li>file a bug report: <a href="http://findbugs.sourceforge.net/reportingBugs.html">http://findbugs.sourceforge.net/reportingBugs.html</a></li>
          </ul>

          <p>
          In particular,
          the false-positive suppression heuristics for this
          bug pattern have not been extensively tuned, so
          reports about false positives are helpful to us.
          </p>

          <p>
          See Weimer and Necula, <i>Finding and Preventing Run-Time Error Handling Mistakes</i>, for
          a description of the analysis technique.
          </p>
          
      ]]></Details>
  </BugPattern>
  <BugPattern type="SPP_USE_GETPROPERTY" abbrev="SPP" category="STYLE">
    <ShortDescription>Method calls getProperties just to get one property, use getProperty instead</ShortDescription>
    <Details><![CDATA[
			
			<table>
				<tr><td>This method uses</td></tr>
				<tr><td>String prop = System.getProperties().getProperty("foo");</td></tr>
				<tr><td>instead of simply using</td></tr>
				<tr><td>String prop = System.getProperty("foo");</td></tr>
			</table>
			
		]]></Details>
  </BugPattern>
  <BugPattern type="URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD" abbrev="UrF" category="STYLE">
    <ShortDescription>Unread public/protected field</ShortDescription>
    <Details><![CDATA[

  <p> This field is never read.&nbsp;
The field is public or protected, so perhaps
    it is intended to be used with classes not seen as part of the analysis. If not,
consider removing it from the class.</p>

    ]]></Details>
  </BugPattern>
  <BugPattern type="BC_VACUOUS_INSTANCEOF" abbrev="BC" category="STYLE" cweid="571">
    <ShortDescription>instanceof will always return true</ShortDescription>
    <Details><![CDATA[

<p>
This instanceof test will always return true (unless the value being tested is null).
Although this is safe, make sure it isn't
an indication of some misunderstanding or some other logic error.
If you really want to test the value for being null, perhaps it would be clearer to do
better to do a null test rather than an instanceof test.
</p>

    ]]></Details>
  </BugPattern>
  <BugPattern type="ITC_INHERITANCE_TYPE_CHECKING" abbrev="ITC" category="STYLE">
    <ShortDescription>Method uses instanceof on multiple types to arbitrate logic</ShortDescription>
    <Details><![CDATA[
			
			<p>This method uses the instanceof operator in a series of if/else statements to
			differentiate blocks of code based on type. If these types are related by inheritance,
			it is cleaner to just define a method in the base class, and use overridden methods
			in these classes.</p>
			
		]]></Details>
  </BugPattern>
  <BugPattern type="URF_UNREAD_FIELD" abbrev="UrF" category="PERFORMANCE">
    <ShortDescription>Unread field</ShortDescription>
    <Details><![CDATA[

  <p> This field is never read.&nbsp; Consider removing it from the class.</p>

    ]]></Details>
  </BugPattern>
  <BugPattern type="NAB_NEEDLESS_BOXING_PARSE" abbrev="NAB" category="PERFORMANCE">
    <ShortDescription>Method converts String to primitive using excessive boxing</ShortDescription>
    <Details><![CDATA[
			
			<p>This method passes a String to a wrapped primitive object's valueOf method, which in turn calls
			the boxedValue() method to convert to a primitive. When it is desired to convert from a String
			to a primitive value, it is simpler to use the BoxedPrimitive.parseBoxedPrimitive(String)
			method. </p>
			
			<p>Instead of something like:<br/>
<pre><code>
public int someMethod(String data) {
long l = Long.valueOf(data).longValue();
float f = Float.valueOf(data).floatValue();
return Integer.valueOf(data); // There is an implicit .intValue() call
}
</code></pre>
			Simply do: <br/>
<pre><code>
public int someMethod(String data) {
	long l = Long.parseLong(data);
	float f = Float.parseFloat(data);
	return Integer.parseInt(data);
}
</code></pre>
			</p>
			
			
		]]></Details>
  </BugPattern>
  <BugPattern type="ISB_TOSTRING_APPENDING" abbrev="ISB" category="CORRECTNESS">
    <ShortDescription>Method concatenates the result of a toString() call</ShortDescription>
    <Details><![CDATA[
			
			<p>This method concatenates the output of a <code>toString()</code> call into a <code>StringBuffer</code> or <code>StringBuilder</code>.
			It is simpler just to pass the object you want to append to the append call, as that form
			does not suffer the potential for <code>NullPointerException</code>s, and is easier to read.</p>
			
			<p>
			Keep in mind that Java compiles simple <code>String</code> concatenation to use <code>StringBuilder</code>s, 
			so you may see this bug even when you don't use <code>StringBuilder</code>s explicitly.
			</p>
			
			<p>
			Instead of: <br/>
<pre><code>
StringBuilder builder = ...;
builder.append(someObj.toString());
...
System.out.println("Problem with the object :" + someObj.toString());
</code></pre>

just do: <br/>

<pre><code>
StringBuilder builder = ...
builder.append(someObj);
...
System.out.println("Problem with the object :" + someObj);
</code></pre>
			to avoid the possibility of <code>NullPointerException</code>s when someObj is <code>null</code>.
			</p>
			
		]]></Details>
  </BugPattern>
  <BugPattern type="DM_BOXED_PRIMITIVE_FOR_PARSING" abbrev="Bx" category="PERFORMANCE">
    <ShortDescription>Boxing/unboxing to parse a primitive</ShortDescription>
    <Details><![CDATA[

  <p>A boxed primitive is created from a String, just to extract the unboxed primitive value.
  It is more efficient to just call the static parseXXX method.</p>

    ]]></Details>
  </BugPattern>
  <BugPattern type="MOM_MISLEADING_OVERLOAD_MODEL" abbrev="MOM" category="STYLE">
    <ShortDescription>Class &apos;overloads&apos; a method with both instance and static versions</ShortDescription>
    <Details><![CDATA[
			
			<p>This class 'overloads' the same method with both an instance and static version. As the use
			of these two models is different, it will be confusing to the users of these methods.</p>
			
		]]></Details>
  </BugPattern>
  <BugPattern type="UTAO_JUNIT_ASSERTION_ODDITIES_ACTUAL_CONSTANT" abbrev="UTAO" category="STYLE">
    <ShortDescription>JUnit test method passes constant to second (actual) assertion parameter</ShortDescription>
    <Details><![CDATA[
			
			<p>This method calls assert passing a constant value as the second of the two values. The assert
			method assumes that the expected value is the first parameter, and so it appears that the order
			of values has been swapped here.</p>
			
		]]></Details>
  </BugPattern>
  <BugPattern type="UCPM_USE_CHARACTER_PARAMETERIZED_METHOD" abbrev="UCPM" category="PERFORMANCE">
    <ShortDescription>Method passes constant String of length 1 to character overridden method</ShortDescription>
    <Details><![CDATA[
			
			<p>This method passes a constant literal <code>String</code> of length 1 as a parameter to a method, that
			exposes a similar method that takes a <code>char</code>. It is simpler and more expedient to handle one
			character, rather than a <code>String</code>.</p>
			
			<p>
			Instead of making calls like: <br/>
<pre><code>
String myString = ...
if (myString.indexOf("e") != -1) {
    int i = myString.lastIndexOf("e");
    System.out.println(myString + ":" + i);  //the Java compiler will use a StringBuilder internally here [builder.append(":")]
    ...
    return myString.replace("m","z");
}
</code></pre>
			Replace the single letter <code>String</code>s with their <code>char</code> equivalents like so:<br/>
			
<pre><code>
String myString = ...
if (myString.indexOf('e') != -1) {
    int i = myString.lastIndexOf('e');
    System.out.println(myString + ':' + i);  //the Java compiler will use a StringBuilder internally here [builder.append(':')]
    ...
    return myString.replace('m','z');
}
</code></pre>
			</p>
			
		]]></Details>
  </BugPattern>
  <BugPattern type="DLS_DEAD_LOCAL_STORE" abbrev="DLS" category="STYLE">
    <ShortDescription>Dead store to local variable</ShortDescription>
    <Details><![CDATA[

<p>
This instruction assigns a value to a local variable,
but the value is not read or used in any subsequent instruction.
Often, this indicates an error, because the value computed is never
used.
</p>
<p>
Note that Sun's javac compiler often generates dead stores for
final local variables.  Because FindBugs is a bytecode-based tool,
there is no easy way to eliminate these false positives.
</p>

    ]]></Details>
  </BugPattern>
  <BugPattern type="OBJECT_DESERIALIZATION" abbrev="SECOBDES" category="SECURITY" cweid="502">
    <ShortDescription>Object deserialization is used in {1}</ShortDescription>
    <Details><![CDATA[
            
<p>
    Object deserialization of untrusted data can lead to remote code execution, if there is a class in classpath that allows
    the trigger of malicious operation.
</p>
<p>
    Libraries developers tend to fix class that provided potential malicious trigger. There are still classes that are
    known to trigger Denial of Service<sup>[1]</sup>.
</p>
<p>
    Deserialization is a sensible operation that has a great history of vulnerabilities. The web application might
    become vulnerable has soon as a new vulnerability is found in the Java Virtual Machine<sup>[2] [3]</sup>.
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
public UserData deserializeObject(InputStream receivedFile) throws IOException, ClassNotFoundException {

    try (ObjectInputStream in = new ObjectInputStream(receivedFile)) {
        return (UserData) in.readObject();
    }
}
</pre>
</p>

<p>
<b>Solutions:</b><br/>
<p>
Avoid deserializing object provided by remote users.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/502.html">CWE-502: Deserialization of Untrusted Data</a><br/>
<a href="https://www.owasp.org/index.php/Deserialization_of_untrusted_data">Deserialization of untrusted data</a><br/>
<a href="http://www.oracle.com/technetwork/java/seccodeguide-139067.html#8">Serialization and Deserialization </a><br/>
<a href="https://github.com/frohoff/ysoserial">A tool for generating payloads that exploit unsafe Java object deserialization</a><br/>
[1] <a href="https://gist.github.com/coekie/a27cc406fc9f3dc7a70d">Example of Denial of Service using the class java.util.HashSet</a><br/>
[2] <a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590">OpenJDK: Deserialization issue in ObjectInputStream.readSerialData() (CVE-2015-2590)</a><br/>
[3] <a href="https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize">Rapid7: Sun Java Calendar Deserialization Privilege Escalation (CVE-2008-5353)</a>
</p>

        ]]></Details>
  </BugPattern>
  <BugPattern type="SPP_USE_ISEMPTY" abbrev="SPP" category="STYLE">
    <ShortDescription>Method checks the size of a collection against zero rather than using isEmpty()</ShortDescription>
    <Details><![CDATA[
			
			<p>This method calls the size() method on a collection and compares the result to zero to see if the collection
			is empty. For better code clarity, it is better to just use col.isEmpty() or !col.isEmpty().</p>
			
		]]></Details>
  </BugPattern>
  <BugPattern type="CLI_CONSTANT_LIST_INDEX" abbrev="CLI" category="CORRECTNESS">
    <ShortDescription>Method accesses list or array with constant index</ShortDescription>
    <Details><![CDATA[
			
			<p>This method accesses an array or list using a constant integer index. Often,
			this is a typo where a loop variable is intended to be used. If however, specific
			list indices mean different specific things, then perhaps replacing the list with
			a first-class object with meaningful accessors would make the code less brittle.</p>
			
		]]></Details>
  </BugPattern>
  <BugPattern type="SSCU_SUSPICIOUS_SHADED_CLASS_USE" abbrev="SSCU" category="CORRECTNESS">
    <ShortDescription>Method calls a method from a class that has been shaded by a 3rdparty jar</ShortDescription>
    <Details><![CDATA[
    		
    		<p>This method calls a method found in a 3rdparty library, which appears to be shaded from another 3rdparty library.
    		This occurs when a jar includes other code using tools like the maven shade plugin. It is likely you wanted to use the
    		"first-class" class from the original jar, rather than the class with the shaded package structure, but your IDE pulled in
    		the wrong import.</p>
    		<p>An example might be, you attempted to use a method from the class:
    		<pre><code>
    		com.google.common.collect.Sets
    		</code></pre>
    		But instead, you import:
    		<pre><code>
    		org.apache.jena.ext.com.google.common.collect.Sets
    		</code></pre>
    		</p>
    		
    	]]></Details>
  </BugPattern>
  <BugPattern type="UTAO_JUNIT_ASSERTION_ODDITIES_USE_ASSERT_NOT_EQUALS" abbrev="UTAO" category="CORRECTNESS">
    <ShortDescription>JUnit test method passes boolean expression to Assert.assertFalse / Assert.assertTrue</ShortDescription>
    <Details><![CDATA[
			
			<p>This method evaluates a boolean expression and passes that to Assert.assertFalse / Assert.assertTrue.
			It is better to pass the two values that are being equated to the Assert.assertNotEquals method so that the
			JUnit failure method is more descriptive of the intended test.</p>
			
		]]></Details>
  </BugPattern>
  <BugPattern type="RV_RETURN_VALUE_IGNORED_BAD_PRACTICE" abbrev="RV" category="BAD_PRACTICE" cweid="253">
    <ShortDescription>Method ignores exceptional return value</ShortDescription>
    <Details><![CDATA[

   <p> This method returns a value that is not checked. The return value should be checked
since it can indicate an unusual or unexpected function execution. For
example, the <code>File.delete()</code> method returns false
if the file could not be successfully deleted (rather than
throwing an Exception).
If you don't check the result, you won't notice if the method invocation
signals unexpected behavior by returning an atypical return value.
</p>

    ]]></Details>
  </BugPattern>
  <BugPattern type="IMC_IMMATURE_CLASS_PRINTSTACKTRACE" abbrev="IMC" category="STYLE">
    <ShortDescription>Method prints the stack trace to the console</ShortDescription>
    <Details><![CDATA[
    		
    		<p>This method prints a stack trace to the console. This is non configurable, and causes an 
    		application to look unprofessional. Switch to using loggers so that users can control what 
    		is logged and where.</p>
    		
    	]]></Details>
  </BugPattern>
  <BugPattern type="DM_DEFAULT_ENCODING" abbrev="Dm" category="I18N">
    <ShortDescription>Reliance on default encoding</ShortDescription>
    <Details><![CDATA[

<p> Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.  </p>

      ]]></Details>
  </BugPattern>
  <BugPattern type="NN_NAKED_NOTIFY" abbrev="NN" category="MT_CORRECTNESS">
    <ShortDescription>Naked notify</ShortDescription>
    <Details><![CDATA[

  <p> A call to <code>notify()</code> or <code>notifyAll()</code>
  was made without any (apparent) accompanying
  modification to mutable object state.&nbsp; In general, calling a notify
  method on a monitor is done because some condition another thread is
  waiting for has become true.&nbsp; However, for the condition to be meaningful,
  it must involve a heap object that is visible to both threads.</p>

  <p> This bug does not necessarily indicate an error, since the change to
  mutable object state may have taken place in a method which then called
  the method containing the notification.</p>

    ]]></Details>
  </BugPattern>
  <BugPattern type="UWF_NULL_FIELD" abbrev="UwF" category="CORRECTNESS">
    <ShortDescription>Field only ever set to null</ShortDescription>
    <Details><![CDATA[

  <p> All writes to this field are of the constant value null, and thus
all reads of the field will return null.
Check for errors, or remove it if it is useless.</p>

    ]]></Details>
  </BugPattern>
  <BugPattern type="OS_OPEN_STREAM" abbrev="OS" category="BAD_PRACTICE">
    <ShortDescription>Method may fail to close stream</ShortDescription>
    <Details><![CDATA[

<p> The method creates an IO stream object, does not assign it to any
fields, pass it to other methods that might close it,
or return it, and does not appear to close
the stream on all paths out of the method.&nbsp; This may result in
a file descriptor leak.&nbsp; It is generally a good
idea to use a <code>finally</code> block to ensure that streams are
closed.</p>

    ]]></Details>
  </BugPattern>
  <BugPattern type="UW_UNCOND_WAIT" abbrev="UW" category="MT_CORRECTNESS">
    <ShortDescription>Unconditional wait</ShortDescription>
    <Details><![CDATA[

  <p> This method contains a call to <code>java.lang.Object.wait()</code> which
  is not guarded by conditional control flow.&nbsp; The code should
    verify that condition it intends to wait for is not already satisfied
    before calling wait; any previous notifications will be ignored.
  </p>

    ]]></Details>
  </BugPattern>
  <BugPattern type="NPMC_NON_PRODUCTIVE_METHOD_CALL" abbrev="NPMC" category="CORRECTNESS">
    <ShortDescription>Method ignores return value of a non mutating method</ShortDescription>
    <Details><![CDATA[
			
			<p>This method ignores the return value of a common method that is assumed to be non-mutating.
			If this method does in fact not modify the object it is called on, there is no reason to call
			this method, and it can be removed.</p>
			
		]]></Details>
  </BugPattern>
  <BugPattern type="UTAO_JUNIT_ASSERTION_ODDITIES_USE_ASSERT_NULL" abbrev="UTAO" category="CORRECTNESS">
    <ShortDescription>JUnit test method passes null Assert.assertEquals</ShortDescription>
    <Details><![CDATA[
			
			<p>This method compares an object's equality to null. It is better to use the Assert.assertNull
			method so that the JUnit failure method is more meaningful of the intended test.</p>
			
		]]></Details>
  </BugPattern>
  <BugPattern type="UTAO_JUNIT_ASSERTION_ODDITIES_IMPOSSIBLE_NULL" abbrev="UTAO" category="CORRECTNESS">
    <ShortDescription>JUnit test method asserts that an autoboxed value is not null</ShortDescription>
    <Details><![CDATA[
			
			<p>This method asserts that a primitive value that was autoboxed into a boxed primitive was not
			null. This will never happen, as primitives are never null, and thus the autoboxed value isn't
			either.</p>
			
		]]></Details>
  </BugPattern>
  <BugCode abbrev="IMC">
    <Description>Immature Class</Description>
  </BugCode>
  <BugCode abbrev="MOM">
    <Description>Misleading Overload Model</Description>
  </BugCode>
  <BugCode abbrev="UPM">
    <Description>Private method is never called</Description>
  </BugCode>
  <BugCode abbrev="SSCU">
    <Description>Suspicious Shaded Class Use</Description>
  </BugCode>
  <BugCode abbrev="DLS" cweid="563">
    <Description>Dead local store</Description>
  </BugCode>
  <BugCode abbrev="NPMC">
    <Description>Non Productive Method Call</Description>
  </BugCode>
  <BugCode abbrev="CLI">
    <Description>Constant List Index</Description>
  </BugCode>
  <BugCode abbrev="NN">
    <Description>Naked notify</Description>
  </BugCode>
  <BugCode abbrev="Wa">
    <Description>Wait not in loop</Description>
  </BugCode>
  <BugCode abbrev="UCPM">
    <Description>Use Character Parameterized Method</Description>
  </BugCode>
  <BugCode abbrev="BC">
    <Description>Bad casts of object references</Description>
  </BugCode>
  <BugCode abbrev="UwF">
    <Description>Unwritten field</Description>
  </BugCode>
  <BugCode abbrev="ITC">
    <Description>Inheritance Type Checking</Description>
  </BugCode>
  <BugCode abbrev="SPP">
    <Description>Sillyness Pot Pourri</Description>
  </BugCode>
  <BugCode abbrev="UW">
    <Description>Unconditional wait</Description>
  </BugCode>
  <BugCode abbrev="Bx">
    <Description>Questionable Boxing of primitive value</Description>
  </BugCode>
  <BugCode abbrev="PRMC">
    <Description>Possibly Redundant Method Calls</Description>
  </BugCode>
  <BugCode abbrev="OBL">
    <Description>Unsatisfied obligation to clean up stream or resource</Description>
  </BugCode>
  <BugCode abbrev="OS">
    <Description>Stream not closed on all paths</Description>
  </BugCode>
  <BugCode abbrev="NAB">
    <Description>Needless Autoboxing</Description>
  </BugCode>
  <BugCode abbrev="UTAO">
    <Description>Unit Test Assertion Oddities</Description>
  </BugCode>
  <BugCode abbrev="SECOBDES">
    <Description>Object deserialization is used</Description>
  </BugCode>
  <BugCode abbrev="SACM">
    <Description>Static Array Created in Method</Description>
  </BugCode>
  <BugCode abbrev="Dm">
    <Description>Dubious method used</Description>
  </BugCode>
  <BugCode abbrev="RV" cweid="440">
    <Description>Bad use of return value from method</Description>
  </BugCode>
  <BugCode abbrev="UrF">
    <Description>Unread field</Description>
  </BugCode>
  <BugCode abbrev="ISB">
    <Description>Inefficient String Buffering</Description>
  </BugCode>
  <BugCode abbrev="BED">
    <Description>Bogus Exception Declaration</Description>
  </BugCode>
  <BugCode abbrev="LSC">
    <Description>Literal String Comparison</Description>
  </BugCode>
  <Errors errors="0" missingClasses="0"></Errors>
  <FindBugsSummary timestamp="Mon, 18 Dec 2017 11:06:03 -0600" total_classes="11" referenced_classes="137" total_bugs="98" total_size="1434" num_packages="3" java_version="1.7.0_95" vm_version="24.95-b01" cpu_seconds="60.97" clock_seconds="30.92" peak_mbytes="273.41" alloc_mbytes="3564.50" gc_seconds="0.54" priority_2="85" priority_1="13">
    <FileStats path="twitter4j/SiteStreamsTest.java" bugCount="11" size="292" bugHash="f87a570f904e0771d1a50702faa0ad85"/>
    <FileStats path="twitter4j/SpringCompatibilityTest.java" bugCount="10" size="45" bugHash="da4c752855110bbdfe68b6aefe9bd449"/>
    <FileStats path="twitter4j/StreamAPITest.java" bugCount="12" size="274" bugHash="4d2384a2d505bb64a6745f7cb56adae9"/>
    <FileStats path="twitter4j/TwitterTestBase.java" bugCount="5" size="76" bugHash="ed52b2cccec0f05d0a61539f02f81f70"/>
    <FileStats path="twitter4j/UserStreamTest.java" bugCount="8" size="298" bugHash="71da8565f8773c9196babc33f7a4c088"/>
    <FileStats path="twitter4j/internal/json/DAOTest.java" bugCount="45" size="403" bugHash="5baa04d4ec857dd735adcefed0c30128"/>
    <FileStats path="twitter4j/json/DataObjectFactoryTest.java" bugCount="0" size="17"/>
    <FileStats path="twitter4j/json/JSONObjectTypeTest.java" bugCount="6" size="29" bugHash="dc0b3246ab87d86ed8c4751f2251e469"/>
    <PackageStats package="twitter4j" total_bugs="47" total_types="8" total_size="985" priority_2="44" priority_1="3">
      <ClassStats class="twitter4j.SiteStreamsTest" sourceFile="SiteStreamsTest.java" interface="false" size="292" bugs="12" priority_2="12"/>
      <ClassStats class="twitter4j.SpringCompatibilityTest" sourceFile="SpringCompatibilityTest.java" interface="false" size="45" bugs="10" priority_2="9" priority_1="1"/>
      <ClassStats class="twitter4j.StreamAPITest" sourceFile="StreamAPITest.java" interface="false" size="254" bugs="12" priority_2="12"/>
      <ClassStats class="twitter4j.StreamAPITest$1" sourceFile="StreamAPITest.java" interface="false" size="12" bugs="0"/>
      <ClassStats class="twitter4j.StreamAPITest$2" sourceFile="StreamAPITest.java" interface="false" size="8" bugs="0"/>
      <ClassStats class="twitter4j.TwitterTestBase" sourceFile="TwitterTestBase.java" interface="false" size="61" bugs="3" priority_2="2" priority_1="1"/>
      <ClassStats class="twitter4j.TwitterTestBase$TestUserInfo" sourceFile="TwitterTestBase.java" interface="false" size="15" bugs="2" priority_2="1" priority_1="1"/>
      <ClassStats class="twitter4j.UserStreamTest" sourceFile="UserStreamTest.java" interface="false" size="298" bugs="8" priority_2="8"/>
    </PackageStats>
    <PackageStats package="twitter4j.internal.json" total_bugs="45" total_types="1" total_size="403" priority_2="35" priority_1="10">
      <ClassStats class="twitter4j.internal.json.DAOTest" sourceFile="DAOTest.java" interface="false" size="403" bugs="45" priority_2="35" priority_1="10"/>
    </PackageStats>
    <PackageStats package="twitter4j.json" total_bugs="6" total_types="2" total_size="46" priority_2="6">
      <ClassStats class="twitter4j.json.DataObjectFactoryTest" sourceFile="DataObjectFactoryTest.java" interface="false" size="17" bugs="0"/>
      <ClassStats class="twitter4j.json.JSONObjectTypeTest" sourceFile="JSONObjectTypeTest.java" interface="false" size="29" bugs="6" priority_2="6"/>
    </PackageStats>
    <FindBugsProfile>
      <ClassProfile name="edu.umd.cs.findbugs.classfile.engine.ClassInfoAnalysisEngine" totalMilliseconds="1920" invocations="701" avgMicrosecondsPerInvocation="2739" maxMicrosecondsPerInvocation="81933" standardDeviationMircosecondsPerInvocation="6389"/>
      <ClassProfile name="edu.umd.cs.findbugs.detect.FindNoSideEffectMethods" totalMilliseconds="1470" invocations="137" avgMicrosecondsPerInvocation="10731" maxMicrosecondsPerInvocation="131845" standardDeviationMircosecondsPerInvocation="19997"/>
      <ClassProfile name="com.mebigfatguy.fbcontrib.collect.CollectStatistics" totalMilliseconds="1452" invocations="137" avgMicrosecondsPerInvocation="10604" maxMicrosecondsPerInvocation="186603" standardDeviationMircosecondsPerInvocation="20548"/>
      <ClassProfile name="edu.umd.cs.findbugs.detect.FieldItemSummary" totalMilliseconds="1350" invocations="137" avgMicrosecondsPerInvocation="9860" maxMicrosecondsPerInvocation="99073" standardDeviationMircosecondsPerInvocation="15521"/>
      <ClassProfile name="edu.umd.cs.findbugs.ba.npe.NullDerefAndRedundantComparisonFinder" totalMilliseconds="1048" invocations="141" avgMicrosecondsPerInvocation="7438" maxMicrosecondsPerInvocation="145381" standardDeviationMircosecondsPerInvocation="18881"/>
      <ClassProfile name="edu.umd.cs.findbugs.OpcodeStack$JumpInfoFactory" totalMilliseconds="964" invocations="392" avgMicrosecondsPerInvocation="2461" maxMicrosecondsPerInvocation="54031" standardDeviationMircosecondsPerInvocation="5485"/>
      <ClassProfile name="edu.umd.cs.findbugs.classfile.engine.bcel.ValueNumberDataflowFactory" totalMilliseconds="910" invocations="161" avgMicrosecondsPerInvocation="5654" maxMicrosecondsPerInvocation="115372" standardDeviationMircosecondsPerInvocation="14381"/>
      <ClassProfile name="edu.umd.cs.findbugs.classfile.engine.bcel.IsNullValueDataflowFactory" totalMilliseconds="778" invocations="141" avgMicrosecondsPerInvocation="5520" maxMicrosecondsPerInvocation="85108" standardDeviationMircosecondsPerInvocation="13811"/>
      <ClassProfile name="com.h3xstream.findsecbugs.taintanalysis.TaintDataflowEngine" totalMilliseconds="759" invocations="141" avgMicrosecondsPerInvocation="5384" maxMicrosecondsPerInvocation="117160" standardDeviationMircosecondsPerInvocation="14370"/>
      <ClassProfile name="edu.umd.cs.findbugs.classfile.engine.bcel.UnconditionalValueDerefDataflowFactory" totalMilliseconds="688" invocations="141" avgMicrosecondsPerInvocation="4886" maxMicrosecondsPerInvocation="71767" standardDeviationMircosecondsPerInvocation="10731"/>
      <ClassProfile name="edu.umd.cs.findbugs.classfile.engine.bcel.JavaClassAnalysisEngine" totalMilliseconds="600" invocations="344" avgMicrosecondsPerInvocation="1746" maxMicrosecondsPerInvocation="54955" standardDeviationMircosecondsPerInvocation="6090"/>
      <ClassProfile name="edu.umd.cs.findbugs.classfile.engine.bcel.TypeDataflowFactory" totalMilliseconds="597" invocations="154" avgMicrosecondsPerInvocation="3877" maxMicrosecondsPerInvocation="53994" standardDeviationMircosecondsPerInvocation="8274"/>
      <ClassProfile name="edu.umd.cs.findbugs.detect.NoteDirectlyRelevantTypeQualifiers" totalMilliseconds="439" invocations="137" avgMicrosecondsPerInvocation="3208" maxMicrosecondsPerInvocation="64473" standardDeviationMircosecondsPerInvocation="7709"/>
      <ClassProfile name="edu.umd.cs.findbugs.classfile.engine.bcel.CFGFactory" totalMilliseconds="380" invocations="141" avgMicrosecondsPerInvocation="2699" maxMicrosecondsPerInvocation="25912" standardDeviationMircosecondsPerInvocation="5075"/>
      <ClassProfile name="edu.umd.cs.findbugs.detect.BuildObligationPolicyDatabase" totalMilliseconds="365" invocations="137" avgMicrosecondsPerInvocation="2668" maxMicrosecondsPerInvocation="21810" standardDeviationMircosecondsPerInvocation="4247"/>
      <ClassProfile name="edu.umd.cs.findbugs.classfile.engine.ClassDataAnalysisEngine" totalMilliseconds="360" invocations="722" avgMicrosecondsPerInvocation="498" maxMicrosecondsPerInvocation="12474" standardDeviationMircosecondsPerInvocation="1129"/>
      <ClassProfile name="edu.umd.cs.findbugs.detect.BuildStringPassthruGraph" totalMilliseconds="336" invocations="137" avgMicrosecondsPerInvocation="2458" maxMicrosecondsPerInvocation="26998" standardDeviationMircosecondsPerInvocation="4934"/>
      <ClassProfile name="com.h3xstream.findsecbugs.CrlfLogInjectionDetector" totalMilliseconds="316" invocations="11" avgMicrosecondsPerInvocation="28747" maxMicrosecondsPerInvocation="230245" standardDeviationMircosecondsPerInvocation="64199"/>
      <ClassProfile name="edu.umd.cs.findbugs.detect.FindRefComparison$SpecialTypeAnalysis" totalMilliseconds="295" invocations="133" avgMicrosecondsPerInvocation="2218" maxMicrosecondsPerInvocation="29447" standardDeviationMircosecondsPerInvocation="5203"/>
      <ClassProfile name="com.h3xstream.findsecbugs.injection.redirect.UnvalidatedRedirectDetector" totalMilliseconds="265" invocations="11" avgMicrosecondsPerInvocation="24180" maxMicrosecondsPerInvocation="157866" standardDeviationMircosecondsPerInvocation="44063"/>
      <ClassProfile name="edu.umd.cs.findbugs.detect.OverridingEqualsNotSymmetrical" totalMilliseconds="263" invocations="137" avgMicrosecondsPerInvocation="1924" maxMicrosecondsPerInvocation="28845" standardDeviationMircosecondsPerInvocation="4017"/>
      <ClassProfile name="edu.umd.cs.findbugs.detect.EqualsOperandShouldHaveClassCompatibleWithThis" totalMilliseconds="260" invocations="137" avgMicrosecondsPerInvocation="1905" maxMicrosecondsPerInvocation="23177" standardDeviationMircosecondsPerInvocation="3567"/>
      <ClassProfile name="edu.umd.cs.findbugs.detect.FunctionsThatMightBeMistakenForProcedures" totalMilliseconds="258" invocations="137" avgMicrosecondsPerInvocation="1888" maxMicrosecondsPerInvocation="26252" standardDeviationMircosecondsPerInvocation="3931"/>
      <ClassProfile name="edu.umd.cs.findbugs.util.TopologicalSort" totalMilliseconds="245" invocations="658" avgMicrosecondsPerInvocation="373" maxMicrosecondsPerInvocation="12618" standardDeviationMircosecondsPerInvocation="1113"/>
      <ClassProfile name="edu.umd.cs.findbugs.detect.CalledMethods" totalMilliseconds="241" invocations="137" avgMicrosecondsPerInvocation="1762" maxMicrosecondsPerInvocation="36750" standardDeviationMircosecondsPerInvocation="4805"/>
      <ClassProfile name="com.mebigfatguy.fbcontrib.collect.CollectMethodsReturningImmutableCollections" totalMilliseconds="235" invocations="137" avgMicrosecondsPerInvocation="1719" maxMicrosecondsPerInvocation="36246" standardDeviationMircosecondsPerInvocation="4024"/>
      <ClassProfile name="com.h3xstream.findsecbugs.ExternalConfigurationControlDetector" totalMilliseconds="205" invocations="11" avgMicrosecondsPerInvocation="18643" maxMicrosecondsPerInvocation="128493" standardDeviationMircosecondsPerInvocation="35776"/>
      <ClassProfile name="edu.umd.cs.findbugs.ba.obl.ObligationAnalysis" totalMilliseconds="175" invocations="130" avgMicrosecondsPerInvocation="1351" maxMicrosecondsPerInvocation="14370" standardDeviationMircosecondsPerInvocation="2769"/>
      <ClassProfile name="com.h3xstream.findsecbugs.injection.trust.TrustBoundaryViolationAttributeDetector" totalMilliseconds="155" invocations="11" avgMicrosecondsPerInvocation="14147" maxMicrosecondsPerInvocation="68945" standardDeviationMircosecondsPerInvocation="19451"/>
      <ClassProfile name="edu.umd.cs.findbugs.detect.DumbMethods" totalMilliseconds="151" invocations="11" avgMicrosecondsPerInvocation="13736" maxMicrosecondsPerInvocation="38841" standardDeviationMircosecondsPerInvocation="14482"/>
      <ClassProfile name="edu.umd.cs.findbugs.classfile.engine.bcel.ConstantDataflowFactory" totalMilliseconds="146" invocations="141" avgMicrosecondsPerInvocation="1037" maxMicrosecondsPerInvocation="15356" standardDeviationMircosecondsPerInvocation="2465"/>
      <ClassProfile name="edu.umd.cs.findbugs.detect.FindOpenStream" totalMilliseconds="143" invocations="11" avgMicrosecondsPerInvocation="13090" maxMicrosecondsPerInvocation="62021" standardDeviationMircosecondsPerInvocation="18178"/>
      <ClassProfile name="edu.umd.cs.findbugs.detect.ExplicitSerialization" totalMilliseconds="141" invocations="137" avgMicrosecondsPerInvocation="1032" maxMicrosecondsPerInvocation="40004" standardDeviationMircosecondsPerInvocation="5313"/>
      <ClassProfile name="com.h3xstream.findsecbugs.HttpResponseSplittingDetector" totalMilliseconds="141" invocations="11" avgMicrosecondsPerInvocation="12825" maxMicrosecondsPerInvocation="61106" standardDeviationMircosecondsPerInvocation="17642"/>
      <ClassProfile name="com.h3xstream.findsecbugs.injection.script.ScriptInjectionDetector" totalMilliseconds="139" invocations="11" avgMicrosecondsPerInvocation="12640" maxMicrosecondsPerInvocation="65410" standardDeviationMircosecondsPerInvocation="17795"/>
      <ClassProfile name="edu.umd.cs.findbugs.classfile.engine.bcel.MethodGenFactory" totalMilliseconds="138" invocations="141" avgMicrosecondsPerInvocation="983" maxMicrosecondsPerInvocation="81098" standardDeviationMircosecondsPerInvocation="6793"/>
      <ClassProfile name="com.h3xstream.findsecbugs.injection.ldap.LdapInjectionDetector" totalMilliseconds="126" invocations="11" avgMicrosecondsPerInvocation="11535" maxMicrosecondsPerInvocation="38379" standardDeviationMircosecondsPerInvocation="11451"/>
      <ClassProfile name="com.h3xstream.findsecbugs.injection.trust.TrustBoundaryViolationValueDetector" totalMilliseconds="125" invocations="11" avgMicrosecondsPerInvocation="11399" maxMicrosecondsPerInvocation="41326" standardDeviationMircosecondsPerInvocation="14526"/>
      <ClassProfile name="edu.umd.cs.findbugs.detect.LoadOfKnownNullValue" totalMilliseconds="123" invocations="11" avgMicrosecondsPerInvocation="11248" maxMicrosecondsPerInvocation="34323" standardDeviationMircosecondsPerInvocation="9665"/>
      <ClassProfile name="edu.umd.cs.findbugs.detect.StreamResourceTracker" totalMilliseconds="119" invocations="51" avgMicrosecondsPerInvocation="2352" maxMicrosecondsPerInvocation="20966" standardDeviationMircosecondsPerInvocation="4496"/>
      <ClassProfile name="com.h3xstream.findsecbugs.scala.XssTwirlDetector" totalMilliseconds="115" invocations="11" avgMicrosecondsPerInvocation="10494" maxMicrosecondsPerInvocation="41200" standardDeviationMircosecondsPerInvocation="12467"/>
      <ClassProfile name="com.h3xstream.findsecbugs.injection.fileDisclosure.FileDisclosureDetector" totalMilliseconds="115" invocations="11" avgMicrosecondsPerInvocation="10483" maxMicrosecondsPerInvocation="41049" standardDeviationMircosecondsPerInvocation="13716"/>
      <ClassProfile name="com.h3xstream.findsecbugs.injection.sql.SqlInjectionDetector" totalMilliseconds="114" invocations="11" avgMicrosecondsPerInvocation="10426" maxMicrosecondsPerInvocation="27354" standardDeviationMircosecondsPerInvocation="8591"/>
      <ClassProfile name="com.h3xstream.findsecbugs.injection.aws.AwsQueryInjectionDetector" totalMilliseconds="112" invocations="11" avgMicrosecondsPerInvocation="10250" maxMicrosecondsPerInvocation="44734" standardDeviationMircosecondsPerInvocation="12497"/>
      <ClassProfile name="com.h3xstream.findsecbugs.file.PathTraversalDetector" totalMilliseconds="108" invocations="11" avgMicrosecondsPerInvocation="9885" maxMicrosecondsPerInvocation="30165" standardDeviationMircosecondsPerInvocation="9367"/>
      <ClassProfile name="com.mebigfatguy.fbcontrib.detect.UseToArray" totalMilliseconds="107" invocations="11" avgMicrosecondsPerInvocation="9786" maxMicrosecondsPerInvocation="68446" standardDeviationMircosecondsPerInvocation="19313"/>
      <ClassProfile name="com.h3xstream.findsecbugs.injection.command.CommandInjectionDetector" totalMilliseconds="106" invocations="11" avgMicrosecondsPerInvocation="9695" maxMicrosecondsPerInvocation="27074" standardDeviationMircosecondsPerInvocation="9434"/>
      <ClassProfile name="edu.umd.cs.findbugs.detect.FindNullDeref$CheckCallSitesAndReturnInstructions" totalMilliseconds="104" invocations="141" avgMicrosecondsPerInvocation="744" maxMicrosecondsPerInvocation="35130" standardDeviationMircosecondsPerInvocation="3193"/>
      <ClassProfile name="com.h3xstream.findsecbugs.scala.SSRFDetector" totalMilliseconds="103" invocations="11" avgMicrosecondsPerInvocation="9432" maxMicrosecondsPerInvocation="34300" standardDeviationMircosecondsPerInvocation="10491"/>
      <ClassProfile name="edu.umd.cs.findbugs.detect.UnreadFields" totalMilliseconds="103" invocations="11" avgMicrosecondsPerInvocation="9418" maxMicrosecondsPerInvocation="21033" standardDeviationMircosecondsPerInvocation="6416"/>
      <ClassProfile name="com.h3xstream.findsecbugs.injection.beans.BeanInjectionDetector" totalMilliseconds="103" invocations="11" avgMicrosecondsPerInvocation="9400" maxMicrosecondsPerInvocation="38149" standardDeviationMircosecondsPerInvocation="11029"/>
      <ClassProfile name="edu.umd.cs.findbugs.NonReportingDetectorToDetector2Adapter" totalMilliseconds="100" invocations="2077" avgMicrosecondsPerInvocation="48" maxMicrosecondsPerInvocation="36149" standardDeviationMircosecondsPerInvocation="871"/>
      <ClassProfile name="com.h3xstream.findsecbugs.scala.ScalaSensitiveDataExposureDetector" totalMilliseconds="100" invocations="11" avgMicrosecondsPerInvocation="9106" maxMicrosecondsPerInvocation="29547" standardDeviationMircosecondsPerInvocation="9422"/>
    </FindBugsProfile>
  </FindBugsSummary>
  <ClassFeatures></ClassFeatures>
  <History></History>
</BugCollection>
