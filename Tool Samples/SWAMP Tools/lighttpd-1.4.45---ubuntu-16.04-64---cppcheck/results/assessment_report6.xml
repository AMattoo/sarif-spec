<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.75"/>
    <errors>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ndx&apos; can be reduced." verbose="The scope of the variable &apos;ndx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="mod_scgi.c" file="array.h" line="97"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;key&apos; can be reduced." verbose="The scope of the variable &apos;key&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="mod_scgi.c" line="1677"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;key_len&apos; can be reduced." verbose="The scope of the variable &apos;key_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="mod_scgi.c" line="1678"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ds&apos; can be reduced." verbose="The scope of the variable &apos;ds&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="mod_scgi.c" line="1679"/>
        </error>
        <error id="gethostbynameCalled" severity="style" msg="Obsolescent function &apos;gethostbyname&apos; called. It is recommended to use &apos;getaddrinfo&apos; instead." verbose="Obsolescent function &apos;gethostbyname&apos; called. It is recommended to use &apos;getaddrinfo&apos; instead." cwe="477">
            <location file="mod_scgi.c" line="735"/>
        </error>
        <error id="usleepCalled" severity="style" msg="Obsolescent function &apos;usleep&apos; called. It is recommended to use &apos;nanosleep&apos; or &apos;setitimer&apos; instead." verbose="The obsolescent function &apos;usleep&apos; is called. POSIX.1-2001 declares usleep() function obsolescent and POSIX.1-2008 removes it. It is recommended that new applications use the &apos;nanosleep&apos; or &apos;setitimer&apos; function." cwe="477">
            <location file="mod_scgi.c" line="2302"/>
        </error>
        <error id="doubleFree" severity="error" msg="Resource handle &apos;scgi_fd&apos; freed twice." verbose="Resource handle &apos;scgi_fd&apos; freed twice." cwe="415">
            <location file="mod_scgi.c" line="789"/>
        </error>
        <error id="doubleFree" severity="error" msg="Resource handle &apos;scgi_fd&apos; freed twice." verbose="Resource handle &apos;scgi_fd&apos; freed twice." cwe="415">
            <location file="mod_scgi.c" line="800"/>
        </error>
        <error id="doubleFree" severity="error" msg="Resource handle &apos;scgi_fd&apos; freed twice." verbose="Resource handle &apos;scgi_fd&apos; freed twice." cwe="415">
            <location file="mod_scgi.c" line="807"/>
        </error>
    </errors>
</results>
